// Code generated by ogen, DO NOT EDIT.

package desc

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// V1APIGroupGroupIDDeleteParams is parameters of DELETE /v1/api/group/{group_id} operation.
type V1APIGroupGroupIDDeleteParams struct {
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDDeleteParams(packed middleware.Parameters) (params V1APIGroupGroupIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDDeleteParams, _ error) {
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDInterestInterestIDDeleteParams is parameters of DELETE /v1/api/group/{group_id}/interest/{interest_id} operation.
type V1APIGroupGroupIDInterestInterestIDDeleteParams struct {
	InterestID int64
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDInterestInterestIDDeleteParams(packed middleware.Parameters) (params V1APIGroupGroupIDInterestInterestIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "interest_id",
			In:   "path",
		}
		params.InterestID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDInterestInterestIDDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDInterestInterestIDDeleteParams, _ error) {
	// Decode path: interest_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "interest_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.InterestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interest_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDInterestInterestIDPostParams is parameters of POST /v1/api/group/{group_id}/interest/{interest_id} operation.
type V1APIGroupGroupIDInterestInterestIDPostParams struct {
	InterestID int64
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDInterestInterestIDPostParams(packed middleware.Parameters) (params V1APIGroupGroupIDInterestInterestIDPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "interest_id",
			In:   "path",
		}
		params.InterestID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDInterestInterestIDPostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDInterestInterestIDPostParams, _ error) {
	// Decode path: interest_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "interest_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.InterestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interest_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDPostPostParams is parameters of POST /v1/api/group/{group_id}/post operation.
type V1APIGroupGroupIDPostPostParams struct {
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDPostPostParams(packed middleware.Parameters) (params V1APIGroupGroupIDPostPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDPostPostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDPostPostParams, _ error) {
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDPostPostIDCommentCommentIDDeleteParams is parameters of DELETE /v1/api/group/{group_id}/post/{post_id}/comment/{comment_id} operation.
type V1APIGroupGroupIDPostPostIDCommentCommentIDDeleteParams struct {
	// The post id.
	PostID int64
	// The group id.
	GroupID int64
	// The comment id.
	CommentID int64
}

func unpackV1APIGroupGroupIDPostPostIDCommentCommentIDDeleteParams(packed middleware.Parameters) (params V1APIGroupGroupIDPostPostIDCommentCommentIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "comment_id",
			In:   "path",
		}
		params.CommentID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDPostPostIDCommentCommentIDDeleteParams(args [3]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDPostPostIDCommentCommentIDDeleteParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PostID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: comment_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "comment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDPostPostIDCommentCommentIDPutParams is parameters of PUT /v1/api/group/{group_id}/post/{post_id}/comment/{comment_id} operation.
type V1APIGroupGroupIDPostPostIDCommentCommentIDPutParams struct {
	// The post id.
	PostID int64
	// The group id.
	GroupID int64
	// The comment id.
	CommentID int64
}

func unpackV1APIGroupGroupIDPostPostIDCommentCommentIDPutParams(packed middleware.Parameters) (params V1APIGroupGroupIDPostPostIDCommentCommentIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "comment_id",
			In:   "path",
		}
		params.CommentID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDPostPostIDCommentCommentIDPutParams(args [3]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDPostPostIDCommentCommentIDPutParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PostID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: comment_id.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "comment_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.CommentID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "comment_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDPostPostIDCommentPostParams is parameters of POST /v1/api/group/{group_id}/post/{post_id}/comment operation.
type V1APIGroupGroupIDPostPostIDCommentPostParams struct {
	// The post id.
	PostID int64
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDPostPostIDCommentPostParams(packed middleware.Parameters) (params V1APIGroupGroupIDPostPostIDCommentPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDPostPostIDCommentPostParams(args [2]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDPostPostIDCommentPostParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PostID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDPostPostIDDeleteParams is parameters of DELETE /v1/api/group/{group_id}/post/{post_id} operation.
type V1APIGroupGroupIDPostPostIDDeleteParams struct {
	// The post id.
	PostID int64
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDPostPostIDDeleteParams(packed middleware.Parameters) (params V1APIGroupGroupIDPostPostIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDPostPostIDDeleteParams(args [2]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDPostPostIDDeleteParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PostID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDPostPostIDPutParams is parameters of PUT /v1/api/group/{group_id}/post/{post_id} operation.
type V1APIGroupGroupIDPostPostIDPutParams struct {
	// The post id.
	PostID int64
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDPostPostIDPutParams(packed middleware.Parameters) (params V1APIGroupGroupIDPostPostIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "post_id",
			In:   "path",
		}
		params.PostID = packed[key].(int64)
	}
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDPostPostIDPutParams(args [2]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDPostPostIDPutParams, _ error) {
	// Decode path: post_id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "post_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PostID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "post_id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIGroupGroupIDPutParams is parameters of PUT /v1/api/group/{group_id} operation.
type V1APIGroupGroupIDPutParams struct {
	// The group id.
	GroupID int64
}

func unpackV1APIGroupGroupIDPutParams(packed middleware.Parameters) (params V1APIGroupGroupIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1APIGroupGroupIDPutParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIGroupGroupIDPutParams, _ error) {
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIProfileContactContactIDDeleteParams is parameters of DELETE /v1/api/profile/contact/{contact_id} operation.
type V1APIProfileContactContactIDDeleteParams struct {
	ContactID int64
}

func unpackV1APIProfileContactContactIDDeleteParams(packed middleware.Parameters) (params V1APIProfileContactContactIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "contact_id",
			In:   "path",
		}
		params.ContactID = packed[key].(int64)
	}
	return params
}

func decodeV1APIProfileContactContactIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIProfileContactContactIDDeleteParams, _ error) {
	// Decode path: contact_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contact_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ContactID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contact_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIProfileContactContactIDPutParams is parameters of PUT /v1/api/profile/contact/{contact_id} operation.
type V1APIProfileContactContactIDPutParams struct {
	ContactID int64
}

func unpackV1APIProfileContactContactIDPutParams(packed middleware.Parameters) (params V1APIProfileContactContactIDPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "contact_id",
			In:   "path",
		}
		params.ContactID = packed[key].(int64)
	}
	return params
}

func decodeV1APIProfileContactContactIDPutParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIProfileContactContactIDPutParams, _ error) {
	// Decode path: contact_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contact_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ContactID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contact_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIProfileImageImageIDGetParams is parameters of GET /v1/api/profile/image/{image_id} operation.
type V1APIProfileImageImageIDGetParams struct {
	// The image id.
	ImageID string
}

func unpackV1APIProfileImageImageIDGetParams(packed middleware.Parameters) (params V1APIProfileImageImageIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "image_id",
			In:   "path",
		}
		params.ImageID = packed[key].(string)
	}
	return params
}

func decodeV1APIProfileImageImageIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIProfileImageImageIDGetParams, _ error) {
	// Decode path: image_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "image_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ImageID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "image_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIProfileImagePostParams is parameters of POST /v1/api/profile/image operation.
type V1APIProfileImagePostParams struct {
	// Size of file.
	ContentLength OptInt64
}

func unpackV1APIProfileImagePostParams(packed middleware.Parameters) (params V1APIProfileImagePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "Content-Length",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.ContentLength = v.(OptInt64)
		}
	}
	return params
}

func decodeV1APIProfileImagePostParams(args [0]string, argsEscaped bool, r *http.Request) (params V1APIProfileImagePostParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: Content-Length.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Content-Length",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotContentLengthVal int64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt64(val)
					if err != nil {
						return err
					}

					paramsDotContentLengthVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ContentLength.SetTo(paramsDotContentLengthVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Content-Length",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIProfileInterestInterestIDDeleteParams is parameters of DELETE /v1/api/profile/interest/{interest_id} operation.
type V1APIProfileInterestInterestIDDeleteParams struct {
	InterestID int64
}

func unpackV1APIProfileInterestInterestIDDeleteParams(packed middleware.Parameters) (params V1APIProfileInterestInterestIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "interest_id",
			In:   "path",
		}
		params.InterestID = packed[key].(int64)
	}
	return params
}

func decodeV1APIProfileInterestInterestIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIProfileInterestInterestIDDeleteParams, _ error) {
	// Decode path: interest_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "interest_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.InterestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interest_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1APIProfileInterestInterestIDPostParams is parameters of POST /v1/api/profile/interest/{interest_id} operation.
type V1APIProfileInterestInterestIDPostParams struct {
	InterestID int64
}

func unpackV1APIProfileInterestInterestIDPostParams(packed middleware.Parameters) (params V1APIProfileInterestInterestIDPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "interest_id",
			In:   "path",
		}
		params.InterestID = packed[key].(int64)
	}
	return params
}

func decodeV1APIProfileInterestInterestIDPostParams(args [1]string, argsEscaped bool, r *http.Request) (params V1APIProfileInterestInterestIDPostParams, _ error) {
	// Decode path: interest_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "interest_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.InterestID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "interest_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1PageGroupGroupIDGetParams is parameters of GET /v1/page/group/{group_id} operation.
type V1PageGroupGroupIDGetParams struct {
	// The group id.
	GroupID int64
}

func unpackV1PageGroupGroupIDGetParams(packed middleware.Parameters) (params V1PageGroupGroupIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "group_id",
			In:   "path",
		}
		params.GroupID = packed[key].(int64)
	}
	return params
}

func decodeV1PageGroupGroupIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1PageGroupGroupIDGetParams, _ error) {
	// Decode path: group_id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "group_id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.GroupID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group_id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1PageProfileUsernameGetParams is parameters of GET /v1/page/profile/{username} operation.
type V1PageProfileUsernameGetParams struct {
	// The nickname of the user.
	Username string
}

func unpackV1PageProfileUsernameGetParams(packed middleware.Parameters) (params V1PageProfileUsernameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(string)
	}
	return params
}

func decodeV1PageProfileUsernameGetParams(args [1]string, argsEscaped bool, r *http.Request) (params V1PageProfileUsernameGetParams, _ error) {
	// Decode path: username.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// V1PageSigninGetParams is parameters of GET /v1/page/signin operation.
type V1PageSigninGetParams struct {
	SESSION OptString
}

func unpackV1PageSigninGetParams(packed middleware.Parameters) (params V1PageSigninGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "SESSION",
			In:   "cookie",
		}
		if v, ok := packed[key]; ok {
			params.SESSION = v.(OptString)
		}
	}
	return params
}

func decodeV1PageSigninGetParams(args [0]string, argsEscaped bool, r *http.Request) (params V1PageSigninGetParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: SESSION.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "SESSION",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSESSIONVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSESSIONVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SESSION.SetTo(paramsDotSESSIONVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "SESSION",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// V1PageSignupGetParams is parameters of GET /v1/page/signup operation.
type V1PageSignupGetParams struct {
	SESSION OptString
}

func unpackV1PageSignupGetParams(packed middleware.Parameters) (params V1PageSignupGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "SESSION",
			In:   "cookie",
		}
		if v, ok := packed[key]; ok {
			params.SESSION = v.(OptString)
		}
	}
	return params
}

func decodeV1PageSignupGetParams(args [0]string, argsEscaped bool, r *http.Request) (params V1PageSignupGetParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: SESSION.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "SESSION",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSESSIONVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSESSIONVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.SESSION.SetTo(paramsDotSESSIONVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "SESSION",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}
