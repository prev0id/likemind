// Code generated by ogen, DO NOT EDIT.

package desc

import (
	"io"
	"mime"
	"net/http"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.uber.org/multierr"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

func (s *Server) decodeV1APIGroupGroupIDPostPostRequest(r *http.Request) (
	req *Post,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Post
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "content",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Content = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"content\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    500,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Content)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIGroupGroupIDPostPostIDCommentCommentIDPutRequest(r *http.Request) (
	req *Post,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Post
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "content",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Content = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"content\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    500,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Content)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIGroupGroupIDPostPostIDCommentPostRequest(r *http.Request) (
	req *Post,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Post
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "content",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Content = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"content\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    500,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Content)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIGroupGroupIDPostPostIDPutRequest(r *http.Request) (
	req *Post,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Post
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "content",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Content = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"content\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    500,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Content)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIGroupGroupIDPutRequest(r *http.Request) (
	req *Group,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Group
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Name = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"name\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    5,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Name)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "description",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Description = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"description\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    500,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Description)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIGroupPostRequest(r *http.Request) (
	req *Group,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Group
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Name = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"name\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    5,
						MinLengthSet: true,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Name)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "description",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Description = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"description\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    1,
						MinLengthSet: true,
						MaxLength:    500,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Description)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIProfileContactContactIDPutRequest(r *http.Request) (
	req *Contact,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Contact
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "platform",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Platform = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"platform\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Platform)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "link",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Link = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"link\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Link)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIProfileContactPostRequest(r *http.Request) (
	req *Contact,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request Contact
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "platform",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Platform = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"platform\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Platform)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "link",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Link = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"link\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Link)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIProfileEmailPutRequest(r *http.Request) (
	req *EmailUpdate,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request EmailUpdate
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "email",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Email = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"email\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Email)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "password",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Password = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"password\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Password)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "new_email",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.NewEmail = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"new_email\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.NewEmail)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIProfileImagePostRequest(r *http.Request) (
	req V1APIProfileImagePostReq,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "image/jpeg":
		reader := r.Body
		request := V1APIProfileImagePostReqImageJpeg{Data: reader}
		return &request, close, nil
	case ct == "image/png":
		reader := r.Body
		request := V1APIProfileImagePostReqImagePNG{Data: reader}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIProfilePasswordPutRequest(r *http.Request) (
	req *PasswordUpdate,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request PasswordUpdate
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "email",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Email = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"email\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Email)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "password",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Password = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"password\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Password)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "new_password",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.NewPassword = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"new_password\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.NewPassword)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIProfilePostRequest(r *http.Request) (
	req *ProfileCreate,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request ProfileCreate
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "email",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Email = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"email\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Email)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "password",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Password = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"password\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Password)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "username",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Username = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"username\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    5,
						MinLengthSet: true,
						MaxLength:    25,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^[a-zA-Z0-9_]+$"],
					}).Validate(string(request.Username)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Name = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"name\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^[a-zA-Z0-9_]+$"],
					}).Validate(string(request.Name)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "surname",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Surname = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"surname\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        regexMap["^[a-zA-Z0-9_]+$"],
					}).Validate(string(request.Surname)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "date_of_birth",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDate(val)
					if err != nil {
						return err
					}

					request.DateOfBirth = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"date_of_birth\"")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APIProfilePutRequest(r *http.Request) (
	req *ProfileUpdate,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request ProfileUpdate
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "name",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var requestDotNameVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						requestDotNameVal = c
						return nil
					}(); err != nil {
						return err
					}
					request.Name.SetTo(requestDotNameVal)
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"name\"")
				}
				if err := func() error {
					if value, ok := request.Name.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^[a-zA-Z0-9_]+$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "surname",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var requestDotSurnameVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						requestDotSurnameVal = c
						return nil
					}(); err != nil {
						return err
					}
					request.Surname.SetTo(requestDotSurnameVal)
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"surname\"")
				}
				if err := func() error {
					if value, ok := request.Surname.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^[a-zA-Z0-9_]+$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "username",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var requestDotUsernameVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						requestDotUsernameVal = c
						return nil
					}(); err != nil {
						return err
					}
					request.Username.SetTo(requestDotUsernameVal)
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"username\"")
				}
				if err := func() error {
					if value, ok := request.Username.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    5,
								MinLengthSet: true,
								MaxLength:    25,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        regexMap["^[a-zA-Z0-9_]+$"],
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "date_of_birth",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var requestDotDateOfBirthVal time.Time
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToDate(val)
						if err != nil {
							return err
						}

						requestDotDateOfBirthVal = c
						return nil
					}(); err != nil {
						return err
					}
					request.DateOfBirth.SetTo(requestDotDateOfBirthVal)
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"date_of_birth\"")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "about",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var requestDotAboutVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						requestDotAboutVal = c
						return nil
					}(); err != nil {
						return err
					}
					request.About.SetTo(requestDotAboutVal)
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"about\"")
				}
				if err := func() error {
					if value, ok := request.About.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    500,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "location",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					var requestDotLocationVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						requestDotLocationVal = c
						return nil
					}(); err != nil {
						return err
					}
					request.Location.SetTo(requestDotLocationVal)
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"location\"")
				}
				if err := func() error {
					if value, ok := request.Location.Get(); ok {
						if err := func() error {
							if err := (validate.String{
								MinLength:    0,
								MinLengthSet: false,
								MaxLength:    50,
								MaxLengthSet: true,
								Email:        false,
								Hostname:     false,
								Regex:        nil,
							}).Validate(string(value)); err != nil {
								return errors.Wrap(err, "string")
							}
							return nil
						}(); err != nil {
							return err
						}
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APISearchGetRequest(r *http.Request) (
	req *Search,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/json":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		buf, err := io.ReadAll(r.Body)
		if err != nil {
			return req, close, err
		}

		if len(buf) == 0 {
			return req, close, validate.ErrBodyRequired
		}

		d := jx.DecodeBytes(buf)

		var request Search
		if err := func() error {
			if err := request.Decode(d); err != nil {
				return err
			}
			if err := d.Skip(); err != io.EOF {
				return errors.New("unexpected trailing data")
			}
			return nil
		}(); err != nil {
			err = &ogenerrors.DecodeBodyError{
				ContentType: ct,
				Body:        buf,
				Err:         err,
			}
			return req, close, err
		}
		if err := func() error {
			if err := request.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return req, close, errors.Wrap(err, "validate")
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}

func (s *Server) decodeV1APISigninPostRequest(r *http.Request) (
	req *SignIn,
	close func() error,
	rerr error,
) {
	var closers []func() error
	close = func() error {
		var merr error
		// Close in reverse order, to match defer behavior.
		for i := len(closers) - 1; i >= 0; i-- {
			c := closers[i]
			merr = multierr.Append(merr, c())
		}
		return merr
	}
	defer func() {
		if rerr != nil {
			rerr = multierr.Append(rerr, close())
		}
	}()
	ct, _, err := mime.ParseMediaType(r.Header.Get("Content-Type"))
	if err != nil {
		return req, close, errors.Wrap(err, "parse media type")
	}
	switch {
	case ct == "application/x-www-form-urlencoded":
		if r.ContentLength == 0 {
			return req, close, validate.ErrBodyRequired
		}
		form, err := ht.ParseForm(r)
		if err != nil {
			return req, close, errors.Wrap(err, "parse form")
		}

		var request SignIn
		q := uri.NewQueryDecoder(form)
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "email",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Email = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"email\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    0,
						MinLengthSet: false,
						MaxLength:    50,
						MaxLengthSet: true,
						Email:        true,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Email)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		{
			cfg := uri.QueryParameterDecodingConfig{
				Name:    "password",
				Style:   uri.QueryStyleForm,
				Explode: true,
			}
			if err := q.HasParam(cfg); err == nil {
				if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					request.Password = c
					return nil
				}); err != nil {
					return req, close, errors.Wrap(err, "decode \"password\"")
				}
				if err := func() error {
					if err := (validate.String{
						MinLength:    8,
						MinLengthSet: true,
						MaxLength:    20,
						MaxLengthSet: true,
						Email:        false,
						Hostname:     false,
						Regex:        nil,
					}).Validate(string(request.Password)); err != nil {
						return errors.Wrap(err, "string")
					}
					return nil
				}(); err != nil {
					return req, close, errors.Wrap(err, "validate")
				}
			} else {
				return req, close, errors.Wrap(err, "query")
			}
		}
		return &request, close, nil
	default:
		return req, close, validate.InvalidContentType(ct)
	}
}
