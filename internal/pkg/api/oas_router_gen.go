// Code generated by ogen, DO NOT EDIT.

package desc

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"

			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "api/"

				if l := len("api/"); len(elem) >= l && elem[0:l] == "api/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "contact"

					if l := len("contact"); len(elem) >= l && elem[0:l] == "contact" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleV1APIContactPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "contact_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleV1APIContactContactIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleV1APIContactContactIDPutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,PUT")
							}

							return
						}

					}

				case 'g': // Prefix: "group"

					if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleV1APIGroupPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "group_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleV1APIGroupGroupIDDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleV1APIGroupGroupIDPutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/post"

							if l := len("/post"); len(elem) >= l && elem[0:l] == "/post" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleV1APIGroupGroupIDPostPostRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "post_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleV1APIGroupGroupIDPostPostIDDeleteRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									case "PUT":
										s.handleV1APIGroupGroupIDPostPostIDPutRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,PUT")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/comment"

									if l := len("/comment"); len(elem) >= l && elem[0:l] == "/comment" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleV1APIGroupGroupIDPostPostIDCommentPostRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "comment_id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "DELETE":
												s.handleV1APIGroupGroupIDPostPostIDCommentCommentIDDeleteRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											case "PUT":
												s.handleV1APIGroupGroupIDPostPostIDCommentCommentIDPutRequest([3]string{
													args[0],
													args[1],
													args[2],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "DELETE,PUT")
											}

											return
										}

									}

								}

							}

						}

					}

				case 'i': // Prefix: "interest/"

					if l := len("interest/"); len(elem) >= l && elem[0:l] == "interest/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "interest_id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleV1APIInterestInterestIDDeleteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleV1APIInterestInterestIDPostRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,POST")
						}

						return
					}

				case 'l': // Prefix: "logout"

					if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleV1APILogoutPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

				case 'p': // Prefix: "profile"

					if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleV1APIProfileDeleteRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleV1APIProfilePostRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleV1APIProfilePutRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,POST,PUT")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"

							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleV1APIProfileEmailPutRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						case 'i': // Prefix: "image"

							if l := len("image"); len(elem) >= l && elem[0:l] == "image" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch r.Method {
								case "POST":
									s.handleV1APIProfileImagePostRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "image_id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleV1APIProfileImageImageIDGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}

							}

						case 'p': // Prefix: "password"

							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "PUT":
									s.handleV1APIProfilePasswordPutRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "PUT")
								}

								return
							}

						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "earch"

						if l := len("earch"); len(elem) >= l && elem[0:l] == "earch" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1APISearchGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'i': // Prefix: "ignin"

						if l := len("ignin"); len(elem) >= l && elem[0:l] == "ignin" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleV1APISigninPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

					}

				}

			case 'p': // Prefix: "page/"

				if l := len("page/"); len(elem) >= l && elem[0:l] == "page/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'g': // Prefix: "group"

					if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleV1PageGroupGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "group_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1PageGroupGroupIDGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 'p': // Prefix: "profile"

					if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleV1PageProfileGetRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "username"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1PageProfileUsernameGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "earch"

						if l := len("earch"); len(elem) >= l && elem[0:l] == "earch" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleV1PageSearchGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'i': // Prefix: "ign"

						if l := len("ign"); len(elem) >= l && elem[0:l] == "ign" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "in"

							if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleV1PageSigninGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						case 'u': // Prefix: "up"

							if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleV1PageSignupGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/v1/"

			if l := len("/v1/"); len(elem) >= l && elem[0:l] == "/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "api/"

				if l := len("api/"); len(elem) >= l && elem[0:l] == "api/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "contact"

					if l := len("contact"); len(elem) >= l && elem[0:l] == "contact" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = V1APIContactPostOperation
							r.summary = "Add contact to the user"
							r.operationID = ""
							r.pathPattern = "/v1/api/contact"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "contact_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "DELETE":
								r.name = V1APIContactContactIDDeleteOperation
								r.summary = "Delete contact from the user"
								r.operationID = ""
								r.pathPattern = "/v1/api/contact/{contact_id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = V1APIContactContactIDPutOperation
								r.summary = "Update user's contact"
								r.operationID = ""
								r.pathPattern = "/v1/api/contact/{contact_id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'g': // Prefix: "group"

					if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = V1APIGroupPostOperation
							r.summary = "Create new group"
							r.operationID = ""
							r.pathPattern = "/v1/api/group"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "group_id"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = V1APIGroupGroupIDDeleteOperation
								r.summary = "Delete group"
								r.operationID = ""
								r.pathPattern = "/v1/api/group/{group_id}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = V1APIGroupGroupIDPutOperation
								r.summary = "Update group"
								r.operationID = ""
								r.pathPattern = "/v1/api/group/{group_id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/post"

							if l := len("/post"); len(elem) >= l && elem[0:l] == "/post" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = V1APIGroupGroupIDPostPostOperation
									r.summary = "Create new post"
									r.operationID = ""
									r.pathPattern = "/v1/api/group/{group_id}/post"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "post_id"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[1] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = V1APIGroupGroupIDPostPostIDDeleteOperation
										r.summary = "Delete post"
										r.operationID = ""
										r.pathPattern = "/v1/api/group/{group_id}/post/{post_id}"
										r.args = args
										r.count = 2
										return r, true
									case "PUT":
										r.name = V1APIGroupGroupIDPostPostIDPutOperation
										r.summary = "Update post"
										r.operationID = ""
										r.pathPattern = "/v1/api/group/{group_id}/post/{post_id}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/comment"

									if l := len("/comment"); len(elem) >= l && elem[0:l] == "/comment" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = V1APIGroupGroupIDPostPostIDCommentPostOperation
											r.summary = "Create new comment for the post"
											r.operationID = ""
											r.pathPattern = "/v1/api/group/{group_id}/post/{post_id}/comment"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/"

										if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
											elem = elem[l:]
										} else {
											break
										}

										// Param: "comment_id"
										// Leaf parameter, slashes are prohibited
										idx := strings.IndexByte(elem, '/')
										if idx >= 0 {
											break
										}
										args[2] = elem
										elem = ""

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "DELETE":
												r.name = V1APIGroupGroupIDPostPostIDCommentCommentIDDeleteOperation
												r.summary = "Delete comment for the post"
												r.operationID = ""
												r.pathPattern = "/v1/api/group/{group_id}/post/{post_id}/comment/{comment_id}"
												r.args = args
												r.count = 3
												return r, true
											case "PUT":
												r.name = V1APIGroupGroupIDPostPostIDCommentCommentIDPutOperation
												r.summary = "Update comment"
												r.operationID = ""
												r.pathPattern = "/v1/api/group/{group_id}/post/{post_id}/comment/{comment_id}"
												r.args = args
												r.count = 3
												return r, true
											default:
												return
											}
										}

									}

								}

							}

						}

					}

				case 'i': // Prefix: "interest/"

					if l := len("interest/"); len(elem) >= l && elem[0:l] == "interest/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "interest_id"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "DELETE":
							r.name = V1APIInterestInterestIDDeleteOperation
							r.summary = "Delete interest from the user"
							r.operationID = ""
							r.pathPattern = "/v1/api/interest/{interest_id}"
							r.args = args
							r.count = 1
							return r, true
						case "POST":
							r.name = V1APIInterestInterestIDPostOperation
							r.summary = "Add interest to the user"
							r.operationID = ""
							r.pathPattern = "/v1/api/interest/{interest_id}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				case 'l': // Prefix: "logout"

					if l := len("logout"); len(elem) >= l && elem[0:l] == "logout" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = V1APILogoutPostOperation
							r.summary = "Log out of account"
							r.operationID = ""
							r.pathPattern = "/v1/api/logout"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'p': // Prefix: "profile"

					if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = V1APIProfileDeleteOperation
							r.summary = "Delete user profile"
							r.operationID = ""
							r.pathPattern = "/v1/api/profile"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = V1APIProfilePostOperation
							r.summary = "Create new user profile"
							r.operationID = ""
							r.pathPattern = "/v1/api/profile"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							r.name = V1APIProfilePutOperation
							r.summary = "Update user profile"
							r.operationID = ""
							r.pathPattern = "/v1/api/profile"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "email"

							if l := len("email"); len(elem) >= l && elem[0:l] == "email" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = V1APIProfileEmailPutOperation
									r.summary = "Update email"
									r.operationID = ""
									r.pathPattern = "/v1/api/profile/email"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'i': // Prefix: "image"

							if l := len("image"); len(elem) >= l && elem[0:l] == "image" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									r.name = V1APIProfileImagePostOperation
									r.summary = "Upload new image"
									r.operationID = ""
									r.pathPattern = "/v1/api/profile/image"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "image_id"
								// Leaf parameter, slashes are prohibited
								idx := strings.IndexByte(elem, '/')
								if idx >= 0 {
									break
								}
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "GET":
										r.name = V1APIProfileImageImageIDGetOperation
										r.summary = "Get image"
										r.operationID = ""
										r.pathPattern = "/v1/api/profile/image/{image_id}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

							}

						case 'p': // Prefix: "password"

							if l := len("password"); len(elem) >= l && elem[0:l] == "password" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "PUT":
									r.name = V1APIProfilePasswordPutOperation
									r.summary = "Update password"
									r.operationID = ""
									r.pathPattern = "/v1/api/profile/password"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "earch"

						if l := len("earch"); len(elem) >= l && elem[0:l] == "earch" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = V1APISearchGetOperation
								r.summary = "Search"
								r.operationID = ""
								r.pathPattern = "/v1/api/search"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'i': // Prefix: "ignin"

						if l := len("ignin"); len(elem) >= l && elem[0:l] == "ignin" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = V1APISigninPostOperation
								r.summary = "Sign-in into account"
								r.operationID = ""
								r.pathPattern = "/v1/api/signin"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					}

				}

			case 'p': // Prefix: "page/"

				if l := len("page/"); len(elem) >= l && elem[0:l] == "page/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'g': // Prefix: "group"

					if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = V1PageGroupGetOperation
							r.summary = "Get user's group page"
							r.operationID = ""
							r.pathPattern = "/v1/page/group"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "group_id"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = V1PageGroupGroupIDGetOperation
								r.summary = "Get group page"
								r.operationID = ""
								r.pathPattern = "/v1/page/group/{group_id}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 'p': // Prefix: "profile"

					if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = V1PageProfileGetOperation
							r.summary = "Get user profile page"
							r.operationID = ""
							r.pathPattern = "/v1/page/profile"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"

						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "username"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = V1PageProfileUsernameGetOperation
								r.summary = "Get user profile page"
								r.operationID = ""
								r.pathPattern = "/v1/page/profile/{username}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				case 's': // Prefix: "s"

					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "earch"

						if l := len("earch"); len(elem) >= l && elem[0:l] == "earch" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = V1PageSearchGetOperation
								r.summary = "Get search page"
								r.operationID = ""
								r.pathPattern = "/v1/page/search"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'i': // Prefix: "ign"

						if l := len("ign"); len(elem) >= l && elem[0:l] == "ign" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "in"

							if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = V1PageSigninGetOperation
									r.summary = "Get sign-in page"
									r.operationID = ""
									r.pathPattern = "/v1/page/signin"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						case 'u': // Prefix: "up"

							if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = V1PageSignupGetOperation
									r.summary = "Get sign-up page"
									r.operationID = ""
									r.pathPattern = "/v1/page/signup"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

						}

					}

				}

			}

		}
	}
	return r, false
}
