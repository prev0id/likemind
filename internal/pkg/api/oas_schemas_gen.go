// Code generated by ogen, DO NOT EDIT.

package desc

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

// A plain text error message.
// Ref: #/ErrorResponse
type BadRequest struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s BadRequest) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*BadRequest) v1APIGroupGroupIDDeleteRes()                           {}
func (*BadRequest) v1APIGroupGroupIDPostPostIDCommentCommentIDDeleteRes() {}
func (*BadRequest) v1APIGroupGroupIDPostPostIDCommentCommentIDPutRes()    {}
func (*BadRequest) v1APIGroupGroupIDPostPostIDCommentPostRes()            {}
func (*BadRequest) v1APIGroupGroupIDPostPostIDDeleteRes()                 {}
func (*BadRequest) v1APIGroupGroupIDPostPostIDPutRes()                    {}
func (*BadRequest) v1APIGroupGroupIDPostPostRes()                         {}
func (*BadRequest) v1APIGroupGroupIDPutRes()                              {}
func (*BadRequest) v1APIGroupPostRes()                                    {}
func (*BadRequest) v1APIProfileEmailPutRes()                              {}
func (*BadRequest) v1APIProfileImagePostRes()                             {}
func (*BadRequest) v1APIProfilePasswordPutRes()                           {}
func (*BadRequest) v1APIProfilePostRes()                                  {}
func (*BadRequest) v1APIProfilePutRes()                                   {}
func (*BadRequest) v1APISearchGetRes()                                    {}

// Ref: #/Contact
type Contact struct {
	Platform string `json:"platform"`
	Link     string `json:"link"`
}

// GetPlatform returns the value of Platform.
func (s *Contact) GetPlatform() string {
	return s.Platform
}

// GetLink returns the value of Link.
func (s *Contact) GetLink() string {
	return s.Link
}

// SetPlatform sets the value of Platform.
func (s *Contact) SetPlatform(val string) {
	s.Platform = val
}

// SetLink sets the value of Link.
func (s *Contact) SetLink(val string) {
	s.Link = val
}

// Ref: #/EmailUpdate
type EmailUpdate struct {
	Email    string `json:"email"`
	Password string `json:"password"`
	NewEmail string `json:"new_email"`
}

// GetEmail returns the value of Email.
func (s *EmailUpdate) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *EmailUpdate) GetPassword() string {
	return s.Password
}

// GetNewEmail returns the value of NewEmail.
func (s *EmailUpdate) GetNewEmail() string {
	return s.NewEmail
}

// SetEmail sets the value of Email.
func (s *EmailUpdate) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *EmailUpdate) SetPassword(val string) {
	s.Password = val
}

// SetNewEmail sets the value of NewEmail.
func (s *EmailUpdate) SetNewEmail(val string) {
	s.NewEmail = val
}

// Ref: #/Group
type Group struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns the value of Name.
func (s *Group) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Group) GetDescription() string {
	return s.Description
}

// SetName sets the value of Name.
func (s *Group) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Group) SetDescription(val string) {
	s.Description = val
}

// HTML page content.
// Ref: #/HTMLPage
type HTMLResponse struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s HTMLResponse) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*HTMLResponse) v1APIGroupGroupIDInterestInterestIDDeleteRes()         {}
func (*HTMLResponse) v1APIGroupGroupIDInterestInterestIDPostRes()           {}
func (*HTMLResponse) v1APIGroupGroupIDPostPostIDCommentCommentIDDeleteRes() {}
func (*HTMLResponse) v1APIGroupGroupIDPostPostIDCommentCommentIDPutRes()    {}
func (*HTMLResponse) v1APIGroupGroupIDPostPostIDCommentPostRes()            {}
func (*HTMLResponse) v1APIGroupGroupIDPostPostIDDeleteRes()                 {}
func (*HTMLResponse) v1APIGroupGroupIDPostPostIDPutRes()                    {}
func (*HTMLResponse) v1APIGroupGroupIDPostPostRes()                         {}
func (*HTMLResponse) v1APIGroupGroupIDSubscribeDeleteRes()                  {}
func (*HTMLResponse) v1APIGroupGroupIDSubscribePostRes()                    {}
func (*HTMLResponse) v1APIProfileContactContactIDDeleteRes()                {}
func (*HTMLResponse) v1APIProfileContactContactIDPutRes()                   {}
func (*HTMLResponse) v1APIProfileContactPostRes()                           {}
func (*HTMLResponse) v1APIProfileInterestInterestIDDeleteRes()              {}
func (*HTMLResponse) v1APIProfileInterestInterestIDPostRes()                {}
func (*HTMLResponse) v1APISearchGetRes()                                    {}
func (*HTMLResponse) v1PageGroupGetRes()                                    {}
func (*HTMLResponse) v1PageGroupGroupIDGetRes()                             {}
func (*HTMLResponse) v1PageProfileGetRes()                                  {}
func (*HTMLResponse) v1PageProfileUsernameGetRes()                          {}
func (*HTMLResponse) v1PageSearchGetRes()                                   {}
func (*HTMLResponse) v1PageSigninGetRes()                                   {}
func (*HTMLResponse) v1PageSignupGetRes()                                   {}

type ImageImageJpeg struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ImageImageJpeg) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ImageImageJpeg) v1APIProfileImageImageIDGetRes() {}

type ImageImagePNG struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s ImageImagePNG) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*ImageImagePNG) v1APIProfileImageImageIDGetRes() {}

// A plain text error message.
// Ref: #/ErrorResponse
type InternalError struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s InternalError) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*InternalError) v1APIGroupGroupIDDeleteRes()                           {}
func (*InternalError) v1APIGroupGroupIDInterestInterestIDDeleteRes()         {}
func (*InternalError) v1APIGroupGroupIDInterestInterestIDPostRes()           {}
func (*InternalError) v1APIGroupGroupIDPostPostIDCommentCommentIDDeleteRes() {}
func (*InternalError) v1APIGroupGroupIDPostPostIDCommentCommentIDPutRes()    {}
func (*InternalError) v1APIGroupGroupIDPostPostIDCommentPostRes()            {}
func (*InternalError) v1APIGroupGroupIDPostPostIDDeleteRes()                 {}
func (*InternalError) v1APIGroupGroupIDPostPostIDPutRes()                    {}
func (*InternalError) v1APIGroupGroupIDPostPostRes()                         {}
func (*InternalError) v1APIGroupGroupIDPutRes()                              {}
func (*InternalError) v1APIGroupGroupIDSubscribeDeleteRes()                  {}
func (*InternalError) v1APIGroupGroupIDSubscribePostRes()                    {}
func (*InternalError) v1APIGroupPostRes()                                    {}
func (*InternalError) v1APILogoutPostRes()                                   {}
func (*InternalError) v1APIProfileContactContactIDDeleteRes()                {}
func (*InternalError) v1APIProfileContactContactIDPutRes()                   {}
func (*InternalError) v1APIProfileContactPostRes()                           {}
func (*InternalError) v1APIProfileDeleteRes()                                {}
func (*InternalError) v1APIProfileEmailPutRes()                              {}
func (*InternalError) v1APIProfileImageImageIDGetRes()                       {}
func (*InternalError) v1APIProfileImagePostRes()                             {}
func (*InternalError) v1APIProfileInterestInterestIDDeleteRes()              {}
func (*InternalError) v1APIProfileInterestInterestIDPostRes()                {}
func (*InternalError) v1APIProfilePasswordPutRes()                           {}
func (*InternalError) v1APIProfilePostRes()                                  {}
func (*InternalError) v1APIProfilePutRes()                                   {}
func (*InternalError) v1APISearchGetRes()                                    {}
func (*InternalError) v1APISigninPostRes()                                   {}
func (*InternalError) v1PageGroupGetRes()                                    {}
func (*InternalError) v1PageGroupGroupIDGetRes()                             {}
func (*InternalError) v1PageProfileGetRes()                                  {}
func (*InternalError) v1PageProfileUsernameGetRes()                          {}
func (*InternalError) v1PageSearchGetRes()                                   {}
func (*InternalError) v1PageSigninGetRes()                                   {}
func (*InternalError) v1PageSignupGetRes()                                   {}

// A plain text error message.
// Ref: #/ErrorResponse
type NotAuthorized struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s NotAuthorized) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*NotAuthorized) v1APIGroupGroupIDDeleteRes()                           {}
func (*NotAuthorized) v1APIGroupGroupIDPostPostIDCommentCommentIDDeleteRes() {}
func (*NotAuthorized) v1APIGroupGroupIDPostPostIDCommentCommentIDPutRes()    {}
func (*NotAuthorized) v1APIGroupGroupIDPostPostIDCommentPostRes()            {}
func (*NotAuthorized) v1APIGroupGroupIDPostPostIDDeleteRes()                 {}
func (*NotAuthorized) v1APIGroupGroupIDPostPostIDPutRes()                    {}
func (*NotAuthorized) v1APIGroupGroupIDPostPostRes()                         {}
func (*NotAuthorized) v1APIGroupGroupIDPutRes()                              {}
func (*NotAuthorized) v1APIGroupGroupIDSubscribeDeleteRes()                  {}
func (*NotAuthorized) v1APIGroupGroupIDSubscribePostRes()                    {}
func (*NotAuthorized) v1APIProfileEmailPutRes()                              {}
func (*NotAuthorized) v1APIProfileImageImageIDGetRes()                       {}
func (*NotAuthorized) v1APIProfileImagePostRes()                             {}
func (*NotAuthorized) v1APIProfilePasswordPutRes()                           {}
func (*NotAuthorized) v1APISearchGetRes()                                    {}
func (*NotAuthorized) v1APISigninPostRes()                                   {}
func (*NotAuthorized) v1PageGroupGetRes()                                    {}
func (*NotAuthorized) v1PageGroupGroupIDGetRes()                             {}
func (*NotAuthorized) v1PageProfileGetRes()                                  {}
func (*NotAuthorized) v1PageProfileUsernameGetRes()                          {}
func (*NotAuthorized) v1PageSearchGetRes()                                   {}

// A plain text error message.
// Ref: #/ErrorResponse
type NotFound struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s NotFound) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*NotFound) v1APIGroupGroupIDInterestInterestIDDeleteRes() {}
func (*NotFound) v1APIGroupGroupIDInterestInterestIDPostRes()   {}
func (*NotFound) v1APIGroupGroupIDSubscribeDeleteRes()          {}
func (*NotFound) v1APIGroupGroupIDSubscribePostRes()            {}
func (*NotFound) v1APIProfileContactContactIDDeleteRes()        {}
func (*NotFound) v1APIProfileContactContactIDPutRes()           {}
func (*NotFound) v1APIProfileContactPostRes()                   {}
func (*NotFound) v1APIProfileImageImageIDGetRes()               {}
func (*NotFound) v1APIProfileInterestInterestIDDeleteRes()      {}
func (*NotFound) v1APIProfileInterestInterestIDPostRes()        {}
func (*NotFound) v1PageGroupGroupIDGetRes()                     {}
func (*NotFound) v1PageProfileUsernameGetRes()                  {}

// NewOptDate returns new OptDate with value set to v.
func NewOptDate(v time.Time) OptDate {
	return OptDate{
		Value: v,
		Set:   true,
	}
}

// OptDate is optional time.Time.
type OptDate struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDate was set.
func (o OptDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDate) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDate) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/PasswordUpdate
type PasswordUpdate struct {
	Email       string `json:"email"`
	Password    string `json:"password"`
	NewPassword string `json:"new_password"`
}

// GetEmail returns the value of Email.
func (s *PasswordUpdate) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *PasswordUpdate) GetPassword() string {
	return s.Password
}

// GetNewPassword returns the value of NewPassword.
func (s *PasswordUpdate) GetNewPassword() string {
	return s.NewPassword
}

// SetEmail sets the value of Email.
func (s *PasswordUpdate) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *PasswordUpdate) SetPassword(val string) {
	s.Password = val
}

// SetNewPassword sets the value of NewPassword.
func (s *PasswordUpdate) SetNewPassword(val string) {
	s.NewPassword = val
}

// Ref: #/Post
type Post struct {
	Content string `json:"content"`
}

// GetContent returns the value of Content.
func (s *Post) GetContent() string {
	return s.Content
}

// SetContent sets the value of Content.
func (s *Post) SetContent(val string) {
	s.Content = val
}

// Ref: #/ProfileCreate
type ProfileCreate struct {
	Email       string    `json:"email"`
	Password    string    `json:"password"`
	Username    string    `json:"username"`
	Name        string    `json:"name"`
	Surname     string    `json:"surname"`
	DateOfBirth time.Time `json:"date_of_birth"`
}

// GetEmail returns the value of Email.
func (s *ProfileCreate) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *ProfileCreate) GetPassword() string {
	return s.Password
}

// GetUsername returns the value of Username.
func (s *ProfileCreate) GetUsername() string {
	return s.Username
}

// GetName returns the value of Name.
func (s *ProfileCreate) GetName() string {
	return s.Name
}

// GetSurname returns the value of Surname.
func (s *ProfileCreate) GetSurname() string {
	return s.Surname
}

// GetDateOfBirth returns the value of DateOfBirth.
func (s *ProfileCreate) GetDateOfBirth() time.Time {
	return s.DateOfBirth
}

// SetEmail sets the value of Email.
func (s *ProfileCreate) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *ProfileCreate) SetPassword(val string) {
	s.Password = val
}

// SetUsername sets the value of Username.
func (s *ProfileCreate) SetUsername(val string) {
	s.Username = val
}

// SetName sets the value of Name.
func (s *ProfileCreate) SetName(val string) {
	s.Name = val
}

// SetSurname sets the value of Surname.
func (s *ProfileCreate) SetSurname(val string) {
	s.Surname = val
}

// SetDateOfBirth sets the value of DateOfBirth.
func (s *ProfileCreate) SetDateOfBirth(val time.Time) {
	s.DateOfBirth = val
}

// Ref: #/ProfileUpdate
type ProfileUpdate struct {
	Name        OptString `json:"name"`
	Surname     OptString `json:"surname"`
	Username    OptString `json:"username"`
	DateOfBirth OptDate   `json:"date_of_birth"`
	About       OptString `json:"about"`
	Location    OptString `json:"location"`
}

// GetName returns the value of Name.
func (s *ProfileUpdate) GetName() OptString {
	return s.Name
}

// GetSurname returns the value of Surname.
func (s *ProfileUpdate) GetSurname() OptString {
	return s.Surname
}

// GetUsername returns the value of Username.
func (s *ProfileUpdate) GetUsername() OptString {
	return s.Username
}

// GetDateOfBirth returns the value of DateOfBirth.
func (s *ProfileUpdate) GetDateOfBirth() OptDate {
	return s.DateOfBirth
}

// GetAbout returns the value of About.
func (s *ProfileUpdate) GetAbout() OptString {
	return s.About
}

// GetLocation returns the value of Location.
func (s *ProfileUpdate) GetLocation() OptString {
	return s.Location
}

// SetName sets the value of Name.
func (s *ProfileUpdate) SetName(val OptString) {
	s.Name = val
}

// SetSurname sets the value of Surname.
func (s *ProfileUpdate) SetSurname(val OptString) {
	s.Surname = val
}

// SetUsername sets the value of Username.
func (s *ProfileUpdate) SetUsername(val OptString) {
	s.Username = val
}

// SetDateOfBirth sets the value of DateOfBirth.
func (s *ProfileUpdate) SetDateOfBirth(val OptDate) {
	s.DateOfBirth = val
}

// SetAbout sets the value of About.
func (s *ProfileUpdate) SetAbout(val OptString) {
	s.About = val
}

// SetLocation sets the value of Location.
func (s *ProfileUpdate) SetLocation(val OptString) {
	s.Location = val
}

// Ref: #/Redirect302
type Redirect302 struct {
	HxRedirect OptURI
	Location   OptURI
	SetCookie  OptString
}

// GetHxRedirect returns the value of HxRedirect.
func (s *Redirect302) GetHxRedirect() OptURI {
	return s.HxRedirect
}

// GetLocation returns the value of Location.
func (s *Redirect302) GetLocation() OptURI {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *Redirect302) GetSetCookie() OptString {
	return s.SetCookie
}

// SetHxRedirect sets the value of HxRedirect.
func (s *Redirect302) SetHxRedirect(val OptURI) {
	s.HxRedirect = val
}

// SetLocation sets the value of Location.
func (s *Redirect302) SetLocation(val OptURI) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *Redirect302) SetSetCookie(val OptString) {
	s.SetCookie = val
}

func (*Redirect302) v1APIGroupGroupIDDeleteRes()  {}
func (*Redirect302) v1APIGroupGroupIDPutRes()     {}
func (*Redirect302) v1APIGroupPostRes()           {}
func (*Redirect302) v1APILogoutPostRes()          {}
func (*Redirect302) v1APIProfileDeleteRes()       {}
func (*Redirect302) v1APIProfileEmailPutRes()     {}
func (*Redirect302) v1APIProfileImagePostRes()    {}
func (*Redirect302) v1APIProfilePasswordPutRes()  {}
func (*Redirect302) v1APIProfilePostRes()         {}
func (*Redirect302) v1APIProfilePutRes()          {}
func (*Redirect302) v1APISigninPostRes()          {}
func (*Redirect302) v1PageProfileUsernameGetRes() {}
func (*Redirect302) v1PageSigninGetRes()          {}
func (*Redirect302) v1PageSignupGetRes()          {}

type SessionAuth struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *SessionAuth) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *SessionAuth) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/SignIn
type SignIn struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *SignIn) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignIn) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *SignIn) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignIn) SetPassword(val string) {
	s.Password = val
}

type Type string

const (
	TypeProfile Type = "profile"
	TypeGroup   Type = "group"
)

// AllValues returns all Type values.
func (Type) AllValues() []Type {
	return []Type{
		TypeProfile,
		TypeGroup,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Type) MarshalText() ([]byte, error) {
	switch s {
	case TypeProfile:
		return []byte(s), nil
	case TypeGroup:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Type) UnmarshalText(data []byte) error {
	switch Type(data) {
	case TypeProfile:
		*s = TypeProfile
		return nil
	case TypeGroup:
		*s = TypeGroup
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type V1APIProfileImagePostReq struct {
	Image OptMultipartFile `json:"image"`
}

// GetImage returns the value of Image.
func (s *V1APIProfileImagePostReq) GetImage() OptMultipartFile {
	return s.Image
}

// SetImage sets the value of Image.
func (s *V1APIProfileImagePostReq) SetImage(val OptMultipartFile) {
	s.Image = val
}
