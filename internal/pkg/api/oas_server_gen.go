// Code generated by ogen, DO NOT EDIT.

package desc

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// V1APIContactContactIDDelete implements DELETE /v1/api/contact/{contact_id} operation.
	//
	// Removes a contact with the specified ID from the user's profile.
	//
	// DELETE /v1/api/contact/{contact_id}
	V1APIContactContactIDDelete(ctx context.Context, params V1APIContactContactIDDeleteParams) (V1APIContactContactIDDeleteRes, error)
	// V1APIContactContactIDPut implements PUT /v1/api/contact/{contact_id} operation.
	//
	// Updates user's contact with the specified ID.
	//
	// PUT /v1/api/contact/{contact_id}
	V1APIContactContactIDPut(ctx context.Context, req *Contact, params V1APIContactContactIDPutParams) (V1APIContactContactIDPutRes, error)
	// V1APIContactPost implements POST /v1/api/contact operation.
	//
	// Adds a contact with the specified ID to the user's profile.
	//
	// POST /v1/api/contact
	V1APIContactPost(ctx context.Context, req *Contact) (V1APIContactPostRes, error)
	// V1APIGroupGroupIDDelete implements DELETE /v1/api/group/{group_id} operation.
	//
	// Deletes group.
	//
	// DELETE /v1/api/group/{group_id}
	V1APIGroupGroupIDDelete(ctx context.Context, params V1APIGroupGroupIDDeleteParams) (V1APIGroupGroupIDDeleteRes, error)
	// V1APIGroupGroupIDPostPost implements POST /v1/api/group/{group_id}/post operation.
	//
	// Creates new post. If ok returns post component.
	//
	// POST /v1/api/group/{group_id}/post
	V1APIGroupGroupIDPostPost(ctx context.Context, req *Post, params V1APIGroupGroupIDPostPostParams) (V1APIGroupGroupIDPostPostRes, error)
	// V1APIGroupGroupIDPostPostIDCommentCommentIDDelete implements DELETE /v1/api/group/{group_id}/post/{post_id}/comment/{comment_id} operation.
	//
	// Deletes comment. If ok returns updated comment section.
	//
	// DELETE /v1/api/group/{group_id}/post/{post_id}/comment/{comment_id}
	V1APIGroupGroupIDPostPostIDCommentCommentIDDelete(ctx context.Context, params V1APIGroupGroupIDPostPostIDCommentCommentIDDeleteParams) (V1APIGroupGroupIDPostPostIDCommentCommentIDDeleteRes, error)
	// V1APIGroupGroupIDPostPostIDCommentCommentIDPut implements PUT /v1/api/group/{group_id}/post/{post_id}/comment/{comment_id} operation.
	//
	// Updates comment. If ok returns updated comment section.
	//
	// PUT /v1/api/group/{group_id}/post/{post_id}/comment/{comment_id}
	V1APIGroupGroupIDPostPostIDCommentCommentIDPut(ctx context.Context, req *Post, params V1APIGroupGroupIDPostPostIDCommentCommentIDPutParams) (V1APIGroupGroupIDPostPostIDCommentCommentIDPutRes, error)
	// V1APIGroupGroupIDPostPostIDCommentPost implements POST /v1/api/group/{group_id}/post/{post_id}/comment operation.
	//
	// Creates new comment. If ok returns updated comment section.
	//
	// POST /v1/api/group/{group_id}/post/{post_id}/comment
	V1APIGroupGroupIDPostPostIDCommentPost(ctx context.Context, req *Post, params V1APIGroupGroupIDPostPostIDCommentPostParams) (V1APIGroupGroupIDPostPostIDCommentPostRes, error)
	// V1APIGroupGroupIDPostPostIDDelete implements DELETE /v1/api/group/{group_id}/post/{post_id} operation.
	//
	// Deletes post. If ok returns post component.
	//
	// DELETE /v1/api/group/{group_id}/post/{post_id}
	V1APIGroupGroupIDPostPostIDDelete(ctx context.Context, params V1APIGroupGroupIDPostPostIDDeleteParams) (V1APIGroupGroupIDPostPostIDDeleteRes, error)
	// V1APIGroupGroupIDPostPostIDPut implements PUT /v1/api/group/{group_id}/post/{post_id} operation.
	//
	// Updates post. If ok returns updated post.
	//
	// PUT /v1/api/group/{group_id}/post/{post_id}
	V1APIGroupGroupIDPostPostIDPut(ctx context.Context, req *Post, params V1APIGroupGroupIDPostPostIDPutParams) (V1APIGroupGroupIDPostPostIDPutRes, error)
	// V1APIGroupGroupIDPut implements PUT /v1/api/group/{group_id} operation.
	//
	// Updates group.
	//
	// PUT /v1/api/group/{group_id}
	V1APIGroupGroupIDPut(ctx context.Context, req *Group, params V1APIGroupGroupIDPutParams) (V1APIGroupGroupIDPutRes, error)
	// V1APIGroupPost implements POST /v1/api/group operation.
	//
	// Creates new group. If ok redirects to created group page.
	//
	// POST /v1/api/group
	V1APIGroupPost(ctx context.Context, req *Group) (V1APIGroupPostRes, error)
	// V1APIInterestInterestIDDelete implements DELETE /v1/api/interest/{interest_id} operation.
	//
	// Removes an interest with the specified ID from the user's profile.
	//
	// DELETE /v1/api/interest/{interest_id}
	V1APIInterestInterestIDDelete(ctx context.Context, params V1APIInterestInterestIDDeleteParams) (V1APIInterestInterestIDDeleteRes, error)
	// V1APIInterestInterestIDPost implements POST /v1/api/interest/{interest_id} operation.
	//
	// Adds an interest with the specified ID to the user's profile.
	//
	// POST /v1/api/interest/{interest_id}
	V1APIInterestInterestIDPost(ctx context.Context, params V1APIInterestInterestIDPostParams) (V1APIInterestInterestIDPostRes, error)
	// V1APILogoutPost implements POST /v1/api/logout operation.
	//
	// Terminates the user session and redirects to the sign-in page.
	//
	// POST /v1/api/logout
	V1APILogoutPost(ctx context.Context) (V1APILogoutPostRes, error)
	// V1APIProfileDelete implements DELETE /v1/api/profile operation.
	//
	// Permanently deletes the user profile and all associated data.
	//
	// DELETE /v1/api/profile
	V1APIProfileDelete(ctx context.Context) (V1APIProfileDeleteRes, error)
	// V1APIProfileEmailPut implements PUT /v1/api/profile/email operation.
	//
	// Updates email.
	//
	// PUT /v1/api/profile/email
	V1APIProfileEmailPut(ctx context.Context, req *EmailUpdate) (V1APIProfileEmailPutRes, error)
	// V1APIProfileImageImageIDGet implements GET /v1/api/profile/image/{image_id} operation.
	//
	// Get user image.
	//
	// GET /v1/api/profile/image/{image_id}
	V1APIProfileImageImageIDGet(ctx context.Context, params V1APIProfileImageImageIDGetParams) (V1APIProfileImageImageIDGetRes, error)
	// V1APIProfileImagePost implements POST /v1/api/profile/image operation.
	//
	// Creates new image. If ok returns redirect to updated profile.
	//
	// POST /v1/api/profile/image
	V1APIProfileImagePost(ctx context.Context, req V1APIProfileImagePostReq, params V1APIProfileImagePostParams) (V1APIProfileImagePostRes, error)
	// V1APIProfilePasswordPut implements PUT /v1/api/profile/password operation.
	//
	// Updates password.
	//
	// PUT /v1/api/profile/password
	V1APIProfilePasswordPut(ctx context.Context, req *PasswordUpdate) (V1APIProfilePasswordPutRes, error)
	// V1APIProfilePost implements POST /v1/api/profile operation.
	//
	// Redirects to profile page if ok.
	//
	// POST /v1/api/profile
	V1APIProfilePost(ctx context.Context, req *ProfileCreate) (V1APIProfilePostRes, error)
	// V1APIProfilePut implements PUT /v1/api/profile operation.
	//
	// Updates an existing user profile.
	//
	// PUT /v1/api/profile
	V1APIProfilePut(ctx context.Context, req *ProfileUpdate) (V1APIProfilePutRes, error)
	// V1APISearchGet implements GET /v1/api/search operation.
	//
	// Search users of groups.
	//
	// GET /v1/api/search
	V1APISearchGet(ctx context.Context, req *Search) (V1APISearchGetRes, error)
	// V1APISigninPost implements POST /v1/api/signin operation.
	//
	// Redirects to profile page if ok.
	//
	// POST /v1/api/signin
	V1APISigninPost(ctx context.Context, req *SignIn) (V1APISigninPostRes, error)
	// V1PageGroupGet implements GET /v1/page/group operation.
	//
	// Returns an HTML page displaying details of a user's groups. Requires authentication.
	//
	// GET /v1/page/group
	V1PageGroupGet(ctx context.Context) (V1PageGroupGetRes, error)
	// V1PageGroupGroupIDGet implements GET /v1/page/group/{group_id} operation.
	//
	// Returns an HTML page displaying details of a specific user group. Requires authentication.
	//
	// GET /v1/page/group/{group_id}
	V1PageGroupGroupIDGet(ctx context.Context, params V1PageGroupGroupIDGetParams) (V1PageGroupGroupIDGetRes, error)
	// V1PageProfileGet implements GET /v1/page/profile operation.
	//
	// Returns an HTML page displaying the user's profile information. Requires authentication.
	//
	// GET /v1/page/profile
	V1PageProfileGet(ctx context.Context) (V1PageProfileGetRes, error)
	// V1PageProfileUsernameGet implements GET /v1/page/profile/{username} operation.
	//
	// Returns an HTML page displaying the user's profile information. Requires authentication.
	//
	// GET /v1/page/profile/{username}
	V1PageProfileUsernameGet(ctx context.Context, params V1PageProfileUsernameGetParams) (V1PageProfileUsernameGetRes, error)
	// V1PageSearchGet implements GET /v1/page/search operation.
	//
	// Returns an HTML page where users can search for other users, groups, or content.
	//
	// GET /v1/page/search
	V1PageSearchGet(ctx context.Context) (V1PageSearchGetRes, error)
	// V1PageSigninGet implements GET /v1/page/signin operation.
	//
	// Returns an HTML page for user sign-in.
	//
	// GET /v1/page/signin
	V1PageSigninGet(ctx context.Context, params V1PageSigninGetParams) (V1PageSigninGetRes, error)
	// V1PageSignupGet implements GET /v1/page/signup operation.
	//
	// Returns an HTML page for user sign-up.
	//
	// GET /v1/page/signup
	V1PageSignupGet(ctx context.Context, params V1PageSignupGetParams) (V1PageSignupGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
