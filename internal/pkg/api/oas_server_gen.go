// Code generated by ogen, DO NOT EDIT.

package desc

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// GroupGroupNameGet implements GET /group/{group_name} operation.
	//
	// Returns an HTML page displaying details of a specific user group. Requires authentication.
	//
	// GET /group/{group_name}
	GroupGroupNameGet(ctx context.Context, params GroupGroupNameGetParams) (GroupGroupNameGetRes, error)
	// ProfileUsernameGet implements GET /profile/{username} operation.
	//
	// Returns an HTML page displaying the user's profile information. Requires authentication.
	//
	// GET /profile/{username}
	ProfileUsernameGet(ctx context.Context, params ProfileUsernameGetParams) (ProfileUsernameGetRes, error)
	// SearchGet implements GET /search operation.
	//
	// Returns an HTML page where users can search for other users, groups, or content.
	//
	// GET /search
	SearchGet(ctx context.Context) (SearchGetRes, error)
	// SigninGet implements GET /signin operation.
	//
	// Returns an HTML page for user sign-in.
	//
	// GET /signin
	SigninGet(ctx context.Context) (SigninGetRes, error)
	// SignupGet implements GET /signup operation.
	//
	// Returns an HTML page for user sign-up.
	//
	// GET /signup
	SignupGet(ctx context.Context) (SignupGetRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
