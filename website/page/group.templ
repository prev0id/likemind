package page

import (
	"fmt"
	"likemind/internal/common"
	"likemind/internal/domain"
	"likemind/website/view"
	"likemind/website/widget"
	"likemind/website/widget/card"
	common_widget "likemind/website/widget/common"
	"strconv"
)

templ Group(state *view.Group, userID int64) {
	@StandardLayout(view.GroupTab) {
		@card.Container() {
			@card.Card(nil) {
				@card.Header() {
					<div class="flex justify-between items-center">
						@card.Title(state.Name)
						if state.Author.ID == userID {
							@withIcon() {
								@common_widget.SettingsButton(view.Button{
									PopoverTarget: "modal_update_interests",
									PopoverAction: "show",
								})
							}
							@common_widget.Modal(view.Modal{
								ID:             "modal_update_interests",
								Title:          "Update your interests",
								RefreshOnClose: true,
							}) {
								@widget.UpdateGroupsForm(state)
								@SelectInterests(state.Interests, state.ID)
							}
						} else {
							<div class="flex">
								@widget.SubscribeButton(state.ID, state.Subscribed)
							</div>
						}
					</div>
				}
				@card.Text(state.Description)
				@widget.InterestsPreview(state.Interests)
			}
			@widget.FormAddPost(state)
			@Posts(state)
		}
	}
}

templ Posts(group *view.Group) {
	<div id="posts-container" class="space-y-8">
		for _, post := range group.Posts {
			@Post(group, post)
		}
	</div>
}

templ Post(group *view.Group, post *view.Post) {
	@card.Card(nil) {
		@card.Header() {
			@card.Author(post.Author.Nickname)
			@card.Date(post.CreatedAt)
		}
		@card.Text(post.Content)
		@card.Footer() {
			@CommentSection(group, post)
		}
	}
}

templ CommentSection(group *view.Group, post *view.Post) {
	@common_widget.Details(view.Details{
		Summary: numberOfComments(len(post.Comments)),
		Open:    false,
		ID:      fmt.Sprintf("comment-section-%d", post.ID),
	}) {
		@Comments(post.Comments, group.ID, post.ID)
	}
}

templ Comments(comments []*view.Comment, groupID, postID int64) {
	for _, comment := range comments {
		@Comment(comment)
	}
	@widget.FormAddComment(groupID, postID)
}

templ Comment(comment *view.Comment) {
	@card.PinkCard() {
		@card.Header() {
			@card.AuthorSM(comment.Author.Nickname)
			@card.Date(comment.CreatedAt)
		}
		@card.TextSM(comment.Content)
	}
}

func numberOfComments(number int) string {
	if number == 1 {
		return "1 comment"
	}
	return fmt.Sprintf("%d comments", number)
}

templ SelectInterests(groups []view.GroupedInterests, groupID int64) {
	<div id="select-interests-wrapper">
		for _, group := range groups {
			@common_widget.Details(view.Details{
				Summary: group.Name,
				Open:    true,
			}) {
				for _, interest := range group.Interests {
					@common_widget.Checkbox(userInterestCheckboxState(interest, groupID))
				}
			}
		}
	</div>
}

func userInterestCheckboxState(interest view.Interest, groupID int64) view.Checkbox {
	resultPath := common.FillPath(domain.PathAPIGroupInterestID, map[string]string{
		domain.PathParamInterestID: strconv.FormatInt(interest.ID, 10),
		domain.PathParamGroupID:    strconv.FormatInt(groupID, 10),
	})

	htmx := view.HTMX{
		Target: "#select-interests-wrapper",
		Swap:   "outer",
	}
	if interest.Selected {
		htmx.Delete = resultPath
	} else {
		htmx.Post = resultPath
	}

	return view.Checkbox{
		Text:    interest.Name,
		Checked: interest.Selected,
		Htmx:    htmx,
		ID:      fmt.Sprintf("interest-%d", interest.ID),
	}
}
