package group_page

import (
	"fmt"
	"time"

	"likemind/website/page"
	"likemind/website/view"
	"likemind/website/widget/card"
	"likemind/website/widget/header"
	tag "likemind/website/widget/interest"
	"likemind/website/widget/textarea"
)

var State = view.Group{
	Name:        "Cozy Baking Enthusiasts üßÅ",
	Description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec diam lacus, condimentum in maximus sed, varius id libero. Aenean venenatis, ante at aliquam fringilla, nunc augue dignissim ante, sit amet lobortis elit magna eu lorem. Nam quis lorem augue. Vestibulum sollicitudin lacinia facilisis. Pellentesque congue condimentum ornare. Sed mauris sem, tempus vel ornare non, blandit eu orci. Integer ipsum leo, molestie at fermentum eget, tempor eu enim.",
	Posts: []view.Post{
		{
			AuthorNickname: "prevoid",
			Content:        "Just perfected my cinnamon swirl recipe! üéâ The secret is using freshly ground cinnamon and letting the dough rest overnight. Who else loves the smell of freshly baked cinnamon rolls in the morning?",
			CreatedAt:      time.Now(),
			Comments: []view.Comment{
				{
					AuthorNickname: "@MuffinMaster",
					CreatedAt:      time.Now().Add(-3 * time.Hour),
					Content:        "Nothing beats that cinnamon aroma! Do you use any special type of flour?",
				},
				{
					AuthorNickname: "@MuffinMaster",
					CreatedAt:      time.Now().Add(-2 * time.Hour),
					Content:        "This sounds amazing! Could you share the recipe ratios you used?",
				},
				{
					AuthorNickname: "@MuffinMaster",
					CreatedAt:      time.Now().Add(-1 * time.Hour),
					Content:        "Nothing beats that cinnamon aroma! Do you use any special type of flour?",
				},
			},
		},
		{
			AuthorNickname: "@SourdoughSam",
			Content:        "Help! My sourdough starter isn't as active after vacation. Any tips for reviving a neglected starter? I've tried feeding it twice daily but it's still sluggish üòî",
			CreatedAt:      time.Now(),
			Comments: []view.Comment{
				{
					AuthorNickname: "@MuffinMaster",
					CreatedAt:      time.Now().Add(-30 * time.Minute),
					Content:        "Try using rye flour for a few feedings! The extra nutrients can help boost activity",
				},
			},
		},
	},
	Interests: []view.Interest{
		{
			Name:        "Programming",
			ID:          1,
			Description: "bla bla bla bla bla bla bla bla",
		},
		{
			Name:        "Coding",
			ID:          4,
			Description: "bla bla bla bla bla bla bla bla",
		},
		{
			Name:        "Reading classified military documents",
			ID:          2,
			Description: "bla bla bla bla bla bla bla bla",
		},
		{
			Name:        "Video games",
			ID:          3,
			Description: "bla bla bla bla bla bla bla bla",
		},
	},
}

templ Page(state view.Group) {
	@page.StandardLayout(header.AuthorizedTabs.Select(header.GroupTab)) {
		@card.Container() {
			@card.Card(nil) {
				@card.Header() {
					@card.Title(state.Name)
				}
				@card.Text(state.Description)
				@tag.Container() {
					for _, interest := range state.Interests {
						@tag.Interest(interest)
					}
				}
			}
			for _, post := range state.Posts {
				@PostComponent(post)
			}
		}
	}
}

templ PostComponent(post view.Post) {
	@card.Card(templ.Attributes{"x-data": "{ showComments: false }"}) {
		@card.Header() {
			@card.Author(post.AuthorNickname)
			@card.Date(post.CreatedAt)
		}
		@card.Text(post.Content)
		@card.Footer() {
			@CommentDropdownComponent(post.Comments)
		}
	}
}

templ CommentDropdownComponent(comments []view.Comment) {
	<button @click="showComments = !showComments" class="flex items-center text-red hover:text-orange">
		<span class="mr-2">{ numberOfComments(len(comments)) } </span>
		<svg class="w-4 h-4 transition-transform" :class="{ 'rotate-180': showComments }" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
		</svg>
	</button>
	<div x-show="showComments" x-collapse class="space-y-4 mt-4">
		for _, comment := range comments {
			@CommentComponent(comment)
		}
		@AddCommentComponent()
	</div>
}

templ CommentComponent(comment view.Comment) {
	@card.PinkCard() {
		@card.Header() {
			@card.AuthorSM(comment.AuthorNickname)
			@card.Date(comment.CreatedAt)
		}
		@card.TextSM(comment.Content)
	}
}

templ AddCommentComponent() {
	<form
		hx-post="/comments"
		hx-target="#comments-1"
		hx-swap="innerHTML"
		class=""
	>
		<input type="hidden" name="post_id" value="1"/>
		@textarea.Component(textarea.State{
			Name:        "new_comment",
			Placeholder: "Write a warm comment...",
			Rows:        2,
		})
		<div class="flex justify-end gap-2 mt-2">
			<button
				type="submit"
				class="bg-red text-white px-4 py-2 rounded-lg hover:bg-orange transition-colors"
			>
				Post Comment
			</button>
		</div>
		// <div class="htmx-indicator flex items-center gap-2 text-red">
		// 	<svg class="animate-spin h-5 w-5" viewBox="0 0 24 24">
		// 		<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none"></circle>
		// 		<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
		// 	</svg>
		// 	Posting...
		// </div>
	</form>
}

func numberOfComments(number int) string {
	if number == 1 {
		return "1 comment"
	}
	return fmt.Sprintf("%d comments", number)
}
