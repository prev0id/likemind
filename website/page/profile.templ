package page

import (
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"likemind/internal/common"
	"likemind/internal/domain"
	"likemind/website/view"
	"likemind/website/widget"
	common_widget "likemind/website/widget/common"
	"likemind/website/widget/contacts"
	tag "likemind/website/widget/interest"
)

templ Profile(state *view.Profile) {
	@StandardLayout(view.ProfileTab) {
		<div
			class="mx-auto max-w-7xl md:grid md:grid-cols-2 md:gap-20 px-8 py-12"
		>
			@profileImagePreview(state)
			@GridRow() {
				@GridRow() {
					@Name(state)
					@Location(state)
				}
				@About(state)
				@updateInterests(state)
				@contactsContainer(state)
			}
		</div>
	}
	@uploadScript()
}

templ GridRow() {
	<div class="space-y-6">
		{ children... }
	</div>
}

templ Name(state *view.Profile) {
	<h2 class="text-xl font-semibold">
		{ cases.Title(language.English).String(state.Name) }
		{ cases.Title(language.English).String(state.Surname) }
		{ "("+ state.Nickname + ")" }
	</h2>
}

templ Location(state *view.Profile) {
	if state.Location != "" {
		<div>
			{ cases.Title(language.English).String(state.Location) }
		</div>
	}
}

templ About(state *view.Profile) {
	@common_widget.LineBreak()
	if state.Owner {
		@withIcon() {
			@common_widget.Semibold("About")
			@common_widget.SettingsButton(view.Button{
				PopoverTarget: "modal_update_profile",
				PopoverAction: "show",
			})
		}
		@common_widget.Modal(view.Modal{
			ID:    "modal_update_profile",
			Title: "Update your profile",
		}) {
			<div class="grid grid-flow-row gap-2">
				@widget.UpdateProfileData(state)
				@widget.UpdatePassword()
				@widget.UpdateEmail()
			</div>
		}
	} else {
		@common_widget.Semibold("About")
	}
	if state.About != "" {
		<div>{ state.About }</div>
	} else if state.Owner {
		<div>Update your profile description</div>
	} else {
		<div>We don't know about { state.Nickname } much yet</div>
	}
}

templ uploadNewImage() {
	@common_widget.Form(view.Form{
		Htmx: view.HTMX{
			Post:     domain.PathAPIImage,
			Encoding: "multipart/form-data",
		},
		Attributes: templ.Attributes{
			"id":    "upload_new_profile_image_dropbox",
			"class": "grid grid-flow-row gap-4 max-w-full",
		},
	},
	) {
		<div
			id="upload_new_profile_image_dropbox"
			class="grid grid-flow-row gap-4 max-w-full"
		>
			<label
				for="upload_new_profile_image_input"
				class="flex justify-around gap-4 max-w-full max-h-80"
			>
				<img
					id="upload_new_profile_image_preview"
					class="rounded-lg max-w-[50%] overflow-hidden hidden"
				/>
				@uploadSVG()
			</label>
			<input
				type="file"
				id="upload_new_profile_image_input"
				accept="image/png, image/jpeg"
				name="image"
				class="hidden"
			/>
			<div class="m-auto">
				@common_widget.Button(view.Button{
					Type: "button",
					ID:   "upload_new_profile_image_button",
				}) {
					Click to select an image or drag & drop it
				}
			</div>
			<p>
				Selected: <span id="upload_new_profile_image_selected">None</span>
			</p>
			@common_widget.Button(view.Button{
				Type:     "submit",
				ID:       "upload_new_profile_image_submit",
				Disabled: true,
			}) {
				Submit
			}
		</div>
	}
}

templ profileImagePreview(state *view.Profile) {
	<div class="relative group bg-yellow w-full h-full rounded-3xl flex items-center justify-center">
		if state.PictureID != "" {
			<img
				src={ common.FillPath(domain.PathAPIImageID, map[string]string{domain.PathParamImageID: state.PictureID}) }
				alt="Profile picture"
				class="max-w-full min-h-50 max-h-150 overflow-hidden rounded-3xl transition duration-300 ease-in-out data-owner:group-hover:blur-sm"
				data-owner?={ state.Owner }
			/>
		}
		if state.Owner {
			<div
				class="absolute inset-0 opacity-0 group-hover:opacity-100 transition duration-300 ease-in-out flex items-center justify-center mx-auto"
			>
				<div>
					@common_widget.Button(view.Button{
						PopoverTarget: "modal-upload-pfp",
						PopoverAction: "show",
					}) {
						Upload your new avatar
					}
					@common_widget.Modal(view.Modal{
						ID:    "modal-upload-pfp",
						Title: "Upload your new avatar",
					}) {
						@uploadNewImage()
					}
				</div>
			</div>
		}
	</div>
}

templ uploadSVG() {
	<svg
		id="upload_new_profile_image_svg"
		width="150px"
		height="150px"
		viewBox="0 0 1024 1024"
		class="icon"
		version="1.1"
		xmlns="http://www.w3.org/2000/svg"
		fill="#000000"
	>
		<g id="SVGRepo_bgCarrier" stroke-width="0"></g>
		<g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
		<g id="SVGRepo_iconCarrier">
			<path d="M77.312 286.208h503.808v559.104H77.312z" fill="#362f2f"></path>
			<path d="M133.632 342.016h391.68v335.36H133.632z" fill="#fcfaf7"></path>
			<path d="M189.44 621.568h93.184L236.032 537.6zM375.808 453.632l-93.184 167.936h186.88z" fill="#6b2137"></path>
			<path d="M637.44 621.568v83.456l337.408-165.376-211.456-432.64-252.928 122.88h110.08l120.32-58.368 127.488 259.584-230.912 113.152z" fill="#362f2f"></path>
		</g>
	</svg>
}

templ uploadScript() {
	<script src={ domain.PathStaticUploadFile }></script>
}

templ withIcon() {
	<div class="flex justify-between items-center">
		{ children... }
	</div>
}

templ contactsContainer(state *view.Profile) {
	@common_widget.LineBreak()
	@withIcon() {
		@common_widget.Semibold("Contact me at:")
		if state.Owner {
			@common_widget.SettingsButton(view.Button{
				PopoverTarget: "modal_update_contacts",
				PopoverAction: "show",
			})
			@common_widget.Modal(view.Modal{
				ID:    "modal_update_contacts",
				Title: "Update your contacts",
			}) {
				@widget.UpdateContacts(state.Contacts)
			}
		}
	}
	@contacts.Container() {
		for _, contact := range state.Contacts {
			@contacts.Link(contact.Platform, contact.Value)
		}
	}
}

templ updateInterests(state *view.Profile) {
	@common_widget.LineBreak()
	if state.Owner {
		@withIcon() {
			@common_widget.Semibold("Your interests")
			@common_widget.SettingsButton(view.Button{
				PopoverTarget: "modal_update_interests",
				PopoverAction: "show",
			})
		}
		@common_widget.Modal(view.Modal{
			ID:             "modal_update_interests",
			Title:          "Update your interests",
			RefreshOnClose: true,
		}) {
			@widget.SelectInterests(state.Interests, domain.PathAPIProfileInterestID)
		}
	} else {
		@common_widget.Semibold(state.Nickname + "'s interests")
	}
	@tag.Container() {
		{{ atLeastOneInterest := false }}
		for _, group := range state.Interests {
			for _, interest := range group.Interests {
				if interest.Selected {
					{{ atLeastOneInterest = true }}
					@tag.Interest(interest)
				}
			}
		}
		if !atLeastOneInterest && state.Owner {
			Add interests to you profile
		}
		if !atLeastOneInterest && !state.Owner {
			{ state.Nickname } doesn't provided their interests yet
		}
	}
}
