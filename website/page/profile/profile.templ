package profile_page

import (
	"likemind/internal/common"
	"likemind/internal/domain"
	"likemind/website/page"
	"likemind/website/view"
	common_widget "likemind/website/widget/common"
	"likemind/website/widget/contacts"
	"likemind/website/widget/header"
	tag "likemind/website/widget/interest"
	"likemind/website/widget/modal"
	"strconv"
)

var State = view.Profile{
	PictureID: "/static/test_image1.jpg",
	Name:      "Semyon Deev",
	Nickname:  "prevoid",
	Location:  "Moscow, Russia",
	About:     "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas pharetra finibus libero in mattis. Etiam vulputate dolor urna, in lobortis metus finibus non. Vivamus fermentum in risus eu vestibulum. Cras et ultricies felis. Proin eu dui eget turpis egestas rhoncus. Duis laoreet orci cursus, ultrices massa eu, tempor est. Quisque.",
	Contacts: []view.Contact{
		{
			Platform: "Telegram",
			Value:    "https://t.me/prevoid",
		},
		{
			Platform: "VK",
			Value:    "https://t.me/prevoid",
		},
		{
			Platform: "LinkedIn",
			Value:    "https://t.me/prevoid",
		},
	},
	Interests: []view.Interest{
		{
			Name:        "Programming",
			ID:          1,
			Description: "bla bla bla bla bla bla bla bla",
		},
		{
			Name:        "Coding",
			ID:          4,
			Description: "bla bla bla bla bla bla bla bla",
		},
		{
			Name:        "Reading classified military documents",
			ID:          2,
			Description: "bla bla bla bla bla bla bla bla",
		},
		{
			Name:        "Video games",
			ID:          3,
			Description: "bla bla bla bla bla bla bla bla",
		},
	},
}

templ Page(state view.Profile) {
	@page.StandardLayout(header.AuthorizedTabs.Select(header.ProfileTab)) {
		@VSplit() {
			@ProfilePicture(state.PictureID)
			@GridRow() {
				@HeaderWithIcon() {
					@GridRow() {
						@Name(state.Name, state.Nickname)
						@Location(state.Location)
					}
					@EditProfileButton()
				}
				@LineBreak()
				@Semibold("About")
				<div>{ state.About }</div>
				@tag.Container() {
					for _, interest := range state.Interests {
						@tag.Interest(interest)
					}
				}
				@LineBreak()
				@HeaderWithIcon() {
					@Semibold("Contact me at:")
					@EditContactsButton(state.Contacts)
				}
				@contacts.Container() {
					for _, contact := range state.Contacts {
						@contacts.Link(contact.Platform, contact.Value)
					}
				}
			}
		}
	}
}

templ VSplit() {
	<div class="mx-auto max-w-7xl lg:grid lg:grid-cols-2 lg:gap-20 lg:place-items-center px-6 lg:px-8 py-12">
		{ children... }
	</div>
}

templ ProfilePicture(pictureID string) {
	<div
		x-data="{ hover: false }"
		@mouseenter="hover = true"
		@mouseleave="hover = false"
		class="relative bg-yellow w-full h-full rounded-3xl flex items-center justify-center"
	>
		<img
			:class="hover ? 'filter blur-sm transition duration-300' : 'transition duration-300'"
			class="max-w-full max-h-[100rem] overflow-hidden rounded-3xl"
			src={ pictureID }
			alt="Profile Avatar"
		/>
		<div
			x-show="hover"
			class="absolute inset-0 cursor-pointer flex items-center justify-center transition duration-300"
		>
			<div>
				@common_widget.Button(view.Button{PopoverTarget: "modal-upload-pfp", PopoverAction: "show"}) {
					Upload your new avatar
				}
			</div>
			@common_widget.Modal(view.Modal{ID: "modal-upload-pfp", Title: "Upload your new avatar"}) {
				@UpdateProfileImage()
			}
		</div>
	</div>
}

templ Name(name, nickname string) {
	<h2 class="text-xl font-semibold">
		{ name + " ("+ nickname + ")" }
	</h2>
}

templ Location(location string) {
	<div>
		{ location }
	</div>
}

templ LineBreak() {
	<hr class="my-2"/>
}

templ Semibold(text string) {
	<h3 class="font-semibold">
		{ text }
	</h3>
}

templ GridRow() {
	<div class="grid grid-flow-row gap-6">
		{ children... }
	</div>
}

templ HeaderWithIcon() {
	<div class="flex justify-between items-center">
		{ children... }
	</div>
}

templ EditProfileButton() {
	@modal.Wrapper() {
		@modal.ToggleSettings("Update profile")
		@modal.Content("Update your profile") {
			@UpdateProfileForm()
		}
	}
}

templ EditContactsButton(contacts []view.Contact) {
	@modal.Wrapper() {
		@modal.ToggleSettings("Update contacts")
		@modal.Content("Update your contacs") {
			@UpdateContacts(contacts)
		}
	}
}

templ UpdateProfileForm() {
	<form class="space-y-6 max-w-2xl mx-auto">
		<div>
			<label class="block text-sm font-medium text-black mb-2">Location üåç</label>
			<input
				type="text"
				placeholder="City, Country"
				class="w-full px-4 py-3 rounded-lg bg-pink/30 border-2 border-pink focus:border-red focus:ring-2 focus:ring-red/20 transition-all placeholder:text-red/50"
			/>
		</div>
		<div>
			<label class="block text-sm font-medium text-black mb-2">Birthday üéÇ</label>
			<div class="relative">
				<input
					type="date"
					class="w-full px-4 py-3 rounded-lg bg-pink/30 border-2 border-pink focus:border-red focus:ring-2 focus:ring-red/20 appearance-none pr-10"
				/>
				<svg class="w-5 h-5 absolute right-3 top-1/2 -translate-y-1/2 text-red" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
				</svg>
			</div>
		</div>
		<div x-data="{ emailOpen: false }" class="bg-white rounded-xl p-5 shadow-sm">
			<button
				type="button"
				@click="emailOpen = !emailOpen"
				class="w-full flex justify-between items-center text-red hover:text-orange"
			>
				<span class="font-medium">Update Email ‚úâÔ∏è</span>
				<svg class="w-5 h-5 transition-transform" :class="{ 'rotate-180': emailOpen }" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
				</svg>
			</button>
			<div x-show="emailOpen" x-collapse class="mt-4 space-y-4">
				<input
					type="password"
					placeholder="Current Password"
					class="w-full px-4 py-3 rounded-lg bg-pink/30 border-2 border-pink focus:border-red"
				/>
				<input
					type="email"
					placeholder="New Email Address"
					class="w-full px-4 py-3 rounded-lg bg-pink/30 border-2 border-pink focus:border-red"
				/>
			</div>
		</div>
		<div x-data="{ passwordOpen: false }" class="bg-white rounded-xl p-5 shadow-sm">
			<button
				type="button"
				@click="passwordOpen = !passwordOpen"
				class="w-full flex justify-between items-center text-red hover:text-orange"
			>
				<span class="font-medium">Change Password üîí</span>
				<svg class="w-5 h-5 transition-transform" :class="{ 'rotate-180': passwordOpen }" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
				</svg>
			</button>
			<div x-show="passwordOpen" x-collapse class="mt-4 space-y-4">
				<input
					type="password"
					placeholder="Current Password"
					class="w-full px-4 py-3 rounded-lg bg-pink/30 border-2 border-pink focus:border-red"
				/>
				<input
					type="password"
					placeholder="New Password"
					class="w-full px-4 py-3 rounded-lg bg-pink/30 border-2 border-pink focus:border-red"
				/>
				<input
					type="password"
					placeholder="Confirm New Password"
					class="w-full px-4 py-3 rounded-lg bg-pink/30 border-2 border-pink focus:border-red"
				/>
			</div>
		</div>
		<button
			type="submit"
			class="w-full bg-red text-white py-3 rounded-xl font-medium hover:bg-orange transition-colors flex items-center justify-center gap-2"
		>
			<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
			</svg>
			Save Changes
		</button>
	</form>
}

templ UpdateProfileImage() {
	<div
		class="max-w-2xl mx-auto"
		x-data="{
    isDragging: false,
    previewImage: null,
    errorMessage: null,
    fileInput: null
 }"
		@drop.prevent="isDragging = false;
    const file = $event.dataTransfer.files[0];
    if (file && (file.type === 'image/jpeg' || file.type === 'image/png')) {
        previewImage = URL.createObjectURL(file);
        fileInput = file;
        errorMessage = null;
    } else {
        errorMessage = 'Only JPG/PNG files allowed';
    }"
		@dragover.prevent="isDragging = true"
		@dragleave.prevent="isDragging = false"
	>
		<!-- Upload Container -->
		<div class="relative group">
			<div
				:class="{
        'border-red bg-pink/30': isDragging,
        'border-pink bg-pink/20': !isDragging
      }"
				class="border-2 border-dashed rounded-xl w-48 h-48 mx-auto flex items-center justify-center transition-all cursor-pointer"
				@click="$refs.fileInput.click()"
			>
				<!-- Preview Image -->
				<template x-if="previewImage">
					<img
						:src="previewImage"
						class="w-full h-full rounded-lg object-cover absolute inset-0 shadow-sm"
					/>
				</template>
				<!-- Upload Content -->
				<div class="text-center p-4" x-show="!previewImage">
					<svg class="w-8 h-8 mx-auto text-red mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
					</svg>
					<span class="text-red text-sm font-medium block">Click or drag to upload</span>
					<span class="text-red/70 text-xs mt-1 block">JPG/PNG only</span>
				</div>
			</div>
			<!-- Remove Button -->
			<button
				x-show="previewImage"
				@click="previewImage = null; fileInput = null"
				class="absolute -top-2 -right-2 bg-red text-white p-1.5 rounded-full hover:bg-orange transition-colors shadow-sm"
			>
				<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>
		<!-- Error Message -->
		<p x-show="errorMessage" class="text-red text-sm text-center mt-2" x-text="errorMessage"></p>
		<!-- Hidden File Input -->
		<input
			type="file"
			x-ref="fileInput"
			@change="
           const file = $event.target.files[0];
           if (file && (file.type === 'image/jpeg' || file.type === 'image/png')) {
             previewImage = URL.createObjectURL(file);
             fileInput = file;
             errorMessage = null;
           } else {
             errorMessage = 'Only JPG/PNG files allowed';
           }
         "
			class="hidden"
			accept="image/jpeg, image/png"
		/>
		<!-- Upload Button -->
		<button
			x-show="previewImage"
			type="button"
			class="mt-4 mx-auto bg-red text-white px-6 py-2 rounded-lg hover:bg-orange transition-colors flex items-center gap-2"
		>
			<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
			</svg>
			Save New Avatar
		</button>
	</div>
}

templ UpdateContacts(contacts []view.Contact) {
	<div id="contacts-container" class="space-y-3">
		for _, contact := range contacts {
			<div class="p-4 flex items-center gap-4">
				<input
					type="text"
					name="platform"
					disabled="true"
					value={ contact.Platform }
					class="flex-1 px-3 py-2 rounded-lg text-black/90 bg-pink/30 border border-pink focus:border-red focus:ring-2 focus:ring-red/20"
				/>
				<input
					type="url"
					name="link"
					disabled="true"
					value={ contact.Value }
					class="flex-1 px-3 py-2 rounded-lg text-black/90 bg-pink/30 border border-pink focus:border-red focus:ring-2 focus:ring-red/20"
				/>
				<button
					hx-delete={ common.FillPath(
						domain.PathAPIContactID,
					 	map[string]string{
							domain.PathParamContactID: strconv.FormatInt(contact.ID, 10),
						},
					) }
					hx-target="#contacts-container"
					hx-swap="outerHTML"
					class="text-red hover:text-orange p-2 rounded-full hover:bg-pink transition-colors"
				>
					<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>
		}
		<form
			hx-post="/contacts"
			hx-target="#contacts-container"
			hx-swap="outerHTML"
			class="bg-white rounded-lg p-4 shadow-sm flex items-center gap-4"
		>
			<input
				type="text"
				name="platform"
				placeholder="New Platform"
				required
				class="flex-1 px-3 py-2 rounded-lg bg-pink/30 border border-pink focus:border-red focus:ring-2 focus:ring-red/20"
			/>
			<input
				type="url"
				name="link"
				placeholder="https://example.com"
				required
				class="flex-1 px-3 py-2 rounded-lg bg-pink/30 border border-pink focus:border-red focus:ring-2 focus:ring-red/20"
			/>
			<button
				type="submit"
				class="bg-red text-white px-4 py-2 rounded-lg hover:bg-orange transition-colors"
			>
				Add
			</button>
		</form>
	</div>
}
