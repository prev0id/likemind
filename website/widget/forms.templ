package widget

import (
	"fmt"
	"likemind/internal/common"
	"likemind/internal/domain"
	"likemind/website/view"
	common_widget "likemind/website/widget/common"
	"strconv"
	"time"
)

templ FormSignIn() {
	@authFormWrapper() {
		@common_widget.Form(view.Form{Htmx: view.HTMX{Post: domain.PathAPISignin}}) {
			<h1 class="text-xl font-bold leading-tight tracking-tight md:text-2xl">
				Log in to your an account
			</h1>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Email",
					For:  "email",
				})
				@common_widget.Input(view.Input{
					Name:        "email",
					Type:        "email",
					Placeholder: "mail@example.com",
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Password",
					For:  "password",
				})
				@common_widget.Input(view.Input{
					Name:        "password",
					Type:        "password",
					Placeholder: "********",
				})
			</div>
			@common_widget.Button(view.Button{Type: "submit"}) {
				Login
			}
			@common_widget.TextSM() {
				Don't have an account?
				@common_widget.Link(view.Link{
					Href: domain.PathPageSignUp,
					Text: " Create here",
				})
			}
		}
	}
}

templ FormSignUp() {
	@authFormWrapper() {
		@common_widget.Form(view.Form{Htmx: view.HTMX{Post: domain.PathAPIProfile}}) {
			<h1 class="text-xl font-bold leading-tight tracking-tight md:text-2xl">
				Create your an account
			</h1>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Email",
					For:  "email",
				})
				@common_widget.Input(view.Input{
					Name:        "email",
					Type:        "email",
					Placeholder: "mail@example.com",
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Password",
					For:  "password",
				})
				@common_widget.Input(view.Input{
					Name:        "password",
					Type:        "password",
					Placeholder: "********",
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Username",
					For:  "username",
				})
				@common_widget.Input(view.Input{
					Name:        "username",
					Type:        "string",
					Placeholder: "prevoid",
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Name",
					For:  "name",
				})
				@common_widget.Input(view.Input{
					Name:        "name",
					Type:        "text",
					Placeholder: "Semyon",
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Surname",
					For:  "surname",
				})
				@common_widget.Input(view.Input{
					Name:        "surname",
					Type:        "text",
					Placeholder: "Deev",
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Date of birth",
					For:  "date_of_birth",
				})
				@common_widget.Input(view.Input{
					Name: "date_of_birth",
					Type: "date",
				})
			</div>
			@common_widget.Button(view.Button{Type: "submit"}) {
				Signup
			}
			@common_widget.TextSM() {
				Already have an account?
				@common_widget.Link(view.Link{
					Href: domain.PathPageSignUp,
					Text: " log in here",
				})
			}
		}
	}
}

templ authFormWrapper() {
	<div class="text-black flex flex-col items-center justify-center px-6 py-8 mx-auto">
		<div class="w-full bg-yellow-400 rounded-lg shadow-sm sm:max-w-md p-8">
			{ children... }
		</div>
	</div>
}

templ UpdateProfileData(state *view.Profile) {
	@common_widget.Details(view.Details{
		Summary: "Update your data",
	}) {
		@common_widget.Form(view.Form{
			Htmx: view.HTMX{
				Post: domain.PathAPIProfile,
			},
		}) {
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Username",
					For:  "username",
				})
				@common_widget.Input(view.Input{
					Type:  "text",
					Value: state.Nickname,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Name",
					For:  "name",
				})
				@common_widget.Input(view.Input{
					Type:  "text",
					Value: state.Name,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Surname",
					For:  "surname",
				})
				@common_widget.Input(view.Input{
					Type:  "text",
					Value: state.Surname,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Location",
					For:  "location",
				})
				@common_widget.Input(view.Input{
					Type:        "text",
					Placeholder: "City, Country",
					Value:       state.Location,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Birthday",
					For:  "date_of_birth",
				})
				@common_widget.Input(view.Input{
					Name:  "date_of_birth",
					Type:  "date",
					Value: state.DateOfBirth.Format(time.DateOnly),
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "About",
					For:  "about",
				})
				@common_widget.TextArea(view.TextArea{
					Name:        "about",
					Placeholder: "write here about yourself",
					Value:       state.About,
					Rows:        4,
				})
			</div>
			@common_widget.Button(view.Button{
				Type: "submit",
			}) {
				Submit
			}
		}
	}
}

templ UpdatePassword() {
	@common_widget.Details(view.Details{
		Summary: "Update your password",
	}) {
		@common_widget.Form(view.Form{
			Htmx: view.HTMX{
				Post: domain.PathAPIPassword,
			},
		}) {
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Repeate your email",
					For:  "email",
				})
				@common_widget.Input(view.Input{
					Name:        "email",
					Type:        "email",
					Placeholder: "mail@example.com",
					Required:    true,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Repeate your current password",
					For:  "password",
				})
				@common_widget.Input(view.Input{
					Name:        "password",
					Type:        "password",
					Placeholder: "*******",
					Required:    true,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "New password",
					For:  "new_password",
				})
				@common_widget.Input(view.Input{
					Name:        "new_password",
					Type:        "password",
					Placeholder: "*******",
					Required:    true,
				})
			</div>
			@common_widget.Button(view.Button{
				Type: "submit",
			}) {
				Submit
			}
		}
	}
}

templ UpdateEmail() {
	@common_widget.Details(view.Details{
		Summary: "Update your email",
	}) {
		@common_widget.Form(view.Form{
			Htmx: view.HTMX{
				Post: domain.PathAPIEmail,
			},
		}) {
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Repeate your current email",
					For:  "email",
				})
				@common_widget.Input(view.Input{
					Name:        "email",
					Type:        "email",
					Placeholder: "mail@example.com",
					Required:    true,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "Repeate your password",
					For:  "password",
				})
				@common_widget.Input(view.Input{
					Name:        "password",
					Type:        "password",
					Placeholder: "*******",
					Required:    true,
				})
			</div>
			<div>
				@common_widget.InputLabel(view.InputLabel{
					Text: "New email",
					For:  "email",
				})
				@common_widget.Input(view.Input{
					Name:        "new_email",
					Type:        "email",
					Placeholder: "mail@example.com",
					Required:    true,
				})
			</div>
			@common_widget.Button(view.Button{
				Type: "submit",
			}) {
				Submit
			}
		}
	}
}

templ UpdateContacts(contacts []view.Contact) {
	<div id="contacts-container" class="space-y-3">
		for _, contact := range contacts {
			<div class="grid grid-cols-[3fr_3fr_1fr] gap-4">
				@common_widget.Input(view.Input{
					Type:     "text",
					Name:     "platform",
					Value:    contact.Platform,
					Disabled: true,
				})
				@common_widget.Input(view.Input{
					Type:     "url",
					Name:     "link",
					Value:    contact.Value,
					Disabled: true,
				})
				@common_widget.XButton(view.HTMX{
					Delete: common.FillPath(
						domain.PathAPIProfileContactID,
						map[string]string{
							domain.PathParamContactID: strconv.FormatInt(contact.ID, 10),
						},
					),
					Target: "#contacts-container",
					Swap:   "outerHTML",
				})
			</div>
		}
		@common_widget.Form(view.Form{
			Htmx: view.HTMX{
				Post:   domain.PathAPIProfileContact,
				Target: "#contacts-container",
				Swap:   "outerHTML",
			},
		}) {
			<div class="grid grid-cols-[3fr_3fr_1fr] gap-4">
				@common_widget.Input(view.Input{
					Type:        "text",
					Name:        "platform",
					Placeholder: "New Platform",
					Required:    true,
				})
				@common_widget.Input(view.Input{
					Type:        "url",
					Name:        "link",
					Placeholder: "https://example.com",
					Required:    true,
				})
				@common_widget.Button(view.Button{
					Type: "submit",
				}) {
					Add
				}
			</div>
		}
	</div>
}

templ SelectInterests(groups []view.GroupedInterests, path string) {
	<div id="select-interests-wrapper">
		for _, group := range groups {
			@common_widget.Details(view.Details{
				Summary: group.Name,
				Open:    true,
			}) {
				for _, interest := range group.Interests {
					@common_widget.Checkbox(userInterestCheckboxState(interest, path))
				}
			}
		}
	</div>
}

func userInterestCheckboxState(interest view.Interest, path string) view.Checkbox {
	resultPath := common.FillPath(path, map[string]string{
		domain.PathParamInterestID: strconv.FormatInt(interest.ID, 10),
	})

	htmx := view.HTMX{
		Target: "#select-interests-wrapper",
		Swap:   "outer",
	}
	if interest.Selected {
		htmx.Delete = resultPath
	} else {
		htmx.Post = resultPath
	}

	return view.Checkbox{
		Text:    interest.Name,
		Checked: interest.Selected,
		Htmx:    htmx,
		ID:      fmt.Sprintf("interest-%d", interest.ID),
	}
}

templ CreateGroupsForm() {
	@common_widget.Form(view.Form{
		Htmx: view.HTMX{
			Post: domain.PathAPIGroup,
		},
	}) {
		<div>
			@common_widget.InputLabel(view.InputLabel{
				Text: "Come up with a name",
				For:  "name",
			})
			@common_widget.Input(view.Input{
				Name:        "name",
				Type:        "text",
				Placeholder: "Cozy Baking Enthusiasts 🧁",
				Required:    true,
			})
		</div>
		<div>
			@common_widget.InputLabel(view.InputLabel{
				Text: "Add description",
				For:  "descpription",
			})
			@common_widget.TextArea(view.TextArea{
				Name:        "description",
				Placeholder: "Tell people more about your new group!",
				Required:    true,
			})
		</div>
		@common_widget.Button(view.Button{
			Type: "submit",
		}) {
			Submit
		}
	}
}

templ SubscribeButton(groupID int64, subscribed bool) {
	if subscribed {
		@common_widget.Button(view.Button{
			Htmx: view.HTMX{
				Delete: common.FillPath(
					domain.PathAPIGroupIDSubscribe,
					map[string]string{domain.PathParamGroupID: strconv.FormatInt(groupID, 10)},
				),
				Swap:    "outerHTML",
				Trigger: "click",
			},
		}) {
			Unsubscribe
		}
	} else {
		@common_widget.Button(view.Button{
			Htmx: view.HTMX{
				Post: common.FillPath(
					domain.PathAPIGroupIDSubscribe,
					map[string]string{domain.PathParamGroupID: strconv.FormatInt(groupID, 10)},
				),
				Swap:    "outerHTML",
				Trigger: "click",
			},
		}) {
			Subscribe
		}
	}
}

templ FormAddPost(group *view.Group) {
	@common_widget.Form(view.Form{
		Htmx: view.HTMX{
			Post: common.FillPath(domain.PathAPIGroupIDPost, map[string]string{
				domain.PathParamGroupID: strconv.FormatInt(group.ID, 10),
			}),
			Target: "#posts-container",
			Swap:   "outerHTML",
		},
	}) {
		@common_widget.TextArea(view.TextArea{
			Name:        "content",
			Placeholder: "Write new post...",
			Rows:        2,
		})
		@common_widget.Button(view.Button{
			Type: "submit",
		}) {
			Add new post
		}
	}
}

templ FormAddComment(group *view.Group, post *view.Post) {
	@common_widget.Form(view.Form{
		Htmx: view.HTMX{
			Post: common.FillPath(domain.PathAPIGroupIDComment, map[string]string{
				domain.PathParamPostID:  strconv.FormatInt(post.ID, 10),
				domain.PathParamGroupID: strconv.FormatInt(group.ID, 10),
			}),
			Target: "#comment-section",
			Swap:   "innerHTML",
		},
	}) {
		@common_widget.TextArea(view.TextArea{
			Name:        "content",
			Placeholder: "Write a warm comment...",
			Rows:        2,
		})
		@common_widget.Button(view.Button{
			Type: "submit",
		}) {
			Post Comment
		}
	}
}

templ FromSearchInterests(name string, interests []view.GroupedInterests) {
	for _, group := range interests {
		@common_widget.Details(view.Details{
			Summary: group.Name,
			Open:    true,
		}) {
			for _, interest := range group.Interests {
				@common_widget.Checkbox(view.Checkbox{
					Text:    interest.Name,
					Checked: interest.Selected,
					Name:    name,
					ID:      fmt.Sprintf("interest-%d", interest.ID),
				})
			}
		}
	}
}

templ FromSearch() {
	@common_widget.Form(view.Form{
		Htmx: view.HTMX{
			Post:    domain.PathPageSearch,
			Trigger: "submit",
		},
	}) {
		Search
		@common_widget.LineBreak()
		@common_widget.RadioButtons([]view.Radio{
			{
				Label: "Group",
				ID:    "group-radio-button",
				Value: "group",
				Name:  "type",
			},
			{
				Label: "User",
				ID:    "user-radio-button",
				Value: "user",
				Name:  "type",
			},
		})
	}
}
